<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: a2fcd66690146176936b03f26ee0f530063ce888 Maintainer: nilgun Status: ready -->
   <sect1 xml:id="install.unix.apache" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <title>Unix sistemler ve Apache 1.3.x</title>
    <para>
     Bu bölümde, PHP'nin Unix platformlarında Apache kurulumlarına özgü
     bilgilere ve ipuçlarına yer verilmiştir. <link
     linkend="install.unix.apache2">Apache 2 ile ilgili bilgiler ve
     ipuçları</link> ayrı bir sayfada verilmiştir.
    </para>
    <para>
     Aşağıda, 10. şıkta kullanacağınız <command>configure</command> betiğinin
     <link linkend="configure.about">temel yapılandırma seçenekleri</link>ni eklerde
     bulabilirsiniz. Eklentilere özgü yapılandırma seçenekleri ise
     eklentilerin kılavuzdaki belgelerinde bulunabilir. Örneklerde
     yazılımların sürüm numaraları, belgeyi sürüm numarasına bağlı kılmamak
     için 'xxx' ile gösterilmiştir. Siz bu çarpıların yerine kurduğunuz
     paketlerin sürüm numaralarını yazacaksınız.
    </para>

    <example xml:id="install.unix.apache.example">
     <title>- PHP'nin Paylaşımlı Apache Modülü olarak kurulumu</title>
     <screen>
<![CDATA[
1.  gunzip apache_xxx.tar.gz
2.  tar -xvf apache_xxx.tar
3.  gunzip php-xxx.tar.gz
4.  tar -xvf php-xxx.tar
5.  cd apache_xxx
6.  ./configure --prefix=/usr --enable-module=so
7.  make
8.  make install
9.  cd ../php-xxx

10. Artık PHP'yi yapılandırabilirsiniz. Burada PHP'yi eklentileri
    etkinleştiren çeşitli seçeneklerle özelleştirebilirsiniz. Olası
    seçeneklerin listesini almak için ./configure --help komutunu
    çalıştırabilirsiniz. Bu örnekte Apache 1 için MySQL destekli
    basit bir yapılandırmaya yer verilmiştir. Ayrıca, apxs komutunun
    bulunduğu yer de buradakinden farklı olabilir.

      ./configure --with-mysql --with-apxs=/usr/bin/apxs

11. make
12. make install

    Kurulumdan sonra yapılandırmanızı değiştirmek isterseniz son üç adımı
    yinelemek yeterlidir. Yeni modülün etkili olması için tek ihtiyacınız
    Apache'yi yeniden başlatmaktır. Apache'nin yeniden derlenmesine gerek
    yoktur.

    Aksi özellikle belirtilmedikçe 'make install' ile phpize gibi çeşitli PHP
    araçları, PEAR, PHP CLI ve bir takım başka şeylerin de kurulumu yapılır.

13. php.ini dosyanızı yapılandırın:

      cp php.ini-development /usr/local/lib/php.ini

    PHP seçeneklerini ayarlamak için .ini dosyanızı düzenleyebilirsiniz. .ini
    dosyanızın başka bir yerde durmasını istiyorsanız, 10. şıkta
    --with-config-file-path=/başka/bir/yer seçeneği ile dosyanız için başka
    bir yer belirtebilirsiniz.

    php.ini-dist yerine php.ini-production (dağıtımın standart .ini dosyası
    yerine önerilen yapılandırmalar dosyasını) kullanmayı tercih ederseniz,
    değişiklik listesini okumayı ihmal etmeyin, çünkü bunlar PHP'nin
    davranışını etkileyecektir.

14. PHP modülünün yüklenmesi için httpd.conf dosyasını düzenlemelisiniz.
    LoadModule yönergesinin değeri PHP modülünün sistemdeki yerini
    göstermelidir. Yukarıdaki 'make install' bunu sizin yerinize yapmıştır
    ama emin olmak için siz yine de bir bakın.

      LoadModule php5_module libexec/libphp5.so

15. httpd.conf'un AddModule bölümünde ClearModuleList yönergesinin altına
    şunu ekleyin:

      AddModule mod_php5.c

16. Apache'ye belli dosya uzantılarını PHP uzantıları olarak ele almasını
    söyleyin. Örneğin, .php uzantılı dosyaları Apache'nin PHP dosyaları
    olarak ele almasını isteyebiliriz. Başka uzantıları da buraya
    ekleyebilirsiniz. Bunları aralarında boşluk bırakarak aynı satıra
    yazabilirsiniz. Biz örnek olsun diye .phtml uzantısını ekledik.

      AddType application/x-httpd-php .php .phtml

    PHP kaynak kodlarını renklendirilmiş olarak göstermek için .phps
    uzantısını da yapılandırmanıza ekleyebilirsiniz. Bu, şöyle yapılır:

      AddType application/x-httpd-php-source .phps

17. Artık Apache'yi başlatabilirsiniz. Bunun için Apache'yi her zaman ki gibi
    başlatmanız yetecektir. (Sunucunun bir HUP veya USR1 sinyali kullanılarak
    yeniden yüklenmemesi için sunucunuzu yeniden başlatmadan önce
    durdurmalısınız.)
]]>
     </screen>
    </example>

    <para>
     PHP'yi bir statik nesne olarak da kurabilirsiniz:
    </para>

    <example xml:id="install.unix.apache.example-static">
     <title>- PHP'nin Duruk Apache Modülü olarak kurulumu</title>
     <screen>
<![CDATA[
1.  gunzip -c apache_1.3.x.tar.gz | tar xf -
2.  cd apache_1.3.x
3.  ./configure
4.  cd ..

5.  gunzip -c php-5.x.y.tar.gz | tar xf -
6.  cd php-5.x.y
7.  ./configure --with-mysql --with-apache=../apache_1.3.x
8.  make
9.  make install

10. cd ../apache_1.3.x

11. ./configure --prefix=/www --activate-module=src/modules/php5/libphp5.a
    (Bu satırda bir hata yok! libphp5.a'nın henüz mevcut olmadığının
    farkındayız. PHP derlenince mevcut olacak.)

12. make
    (Artık httpd çalıştırılabilirini Apache bin dizinine kopyalayabilirsiniz.
    Apache'yi ilk defa kuruyorsanız bu komuttan sonra "make install" komutunu
    da verin.)

13. cd ../php-5.x.y
14. cp php.ini-development /usr/local/lib/php.ini

15. PHP seçeneklerini ayarlamak için artık /usr/local/lib/php.ini dosyasını
    düzenleyebilirsiniz. httpd.conf veya srm.conf dosyasını açıp şunu ekleyin:

    AddType application/x-httpd-php .php
]]>
      </screen>
     </example>

     <para>
      Kullandığınız Unix türevine ve Apache kurulumuna bağlı olarak, sunucuyu
      durdurmanın ve yeniden başlatmanın çeşitli yolları vardır. Aşağıda
      farklı Unix/Apache kurulumları için sunucuyu yeniden başlatırkan
      kullanılabilecek komutlara yer verilmiştir.
      <literal>/bir/yer/</literal> yerine bu uygulamaların dosya sistemindeki
      yerlerini yazınız.
     </para>
     <para>
      <example>
       <title>- Apache'yi yeniden başlatmak için örnek komutlar</title>
       <programlisting role="shell">
<![CDATA[
1. Çeşitli Linux ve SysV türevleri için:
/etc/rc.d/init.d/httpd restart

2. apachectl betiği ile:
/bir/yer/apachectl stop
/bir/yer/apachectl start

3. httpdctl ve httpsdctl (OpenSSL kullanarak), apachectl gibidir:
/bir/yer/httpsdctl stop
/bir/yer/httpsdctl start

4. mod_ssl veya başka bir SSL sunucu kullanıyorsanız, elle durdurup
başlatmanız gerekebilir:
/bir/yer/apachectl stop
/bir/yer/apachectl startssl
]]>
       </programlisting>
      </example>
     </para>
     <para>
      <code>apachectl</code> and <code>http(s)dctl</code>
      çalıştırılabilirlerinin yerleri sık sık değişir. Sisteminizde
      <literal>locate</literal>, <literal>whereis</literal>,
      <literal>which</literal> gibi araçlar kuruluysa bunların yerlerini bu
      araçları kullanarak öğrenebilirsiniz.
     </para>

     <para>
      <emphasis>PHP'yi Apache için derlerken kullanılabilecek farklı
      yapılandırma örnekleri:</emphasis>
      <informalexample>
       <programlisting role="shell">
<![CDATA[
./configure --with-apxs --with-pgsql
]]>
       </programlisting>
      </informalexample>
     </para>
     <para>
      Bu yapılandırmayla, Apache'nin &httpd.conf; dosyasında LoadModule
      yönergesi ile Apache'ye yüklenebilecek şekilde bir
      <filename>libphp5.so</filename> paylaşımlı kütüphanesi oluşturulacak,
      PostgreSQL desteği bu kütüphaneye gömülü olacaktır.
     </para>
     <para>
      <informalexample>
       <programlisting role="shell">
<![CDATA[
./configure --with-apxs --with-pgsql=shared
]]>
       </programlisting>
      </informalexample>
     </para>
     <para>
      Bu yapılandırmayla, Apache için bir <filename>libphp5.so</filename>
      paylaşımlı kütüphanesi oluşturulacak fakat önceki örnekten farklı olarak
      PostgreSQL desteği için <filename>pgsql.so</filename> adında ayrı bir
      paylaşımlı kütüphane oluşturulacaktır. PHP'ye PostgreSQL desteğini,
      eklentiyi &php.ini; içinde bir <code>extension</code> yönergesinde
      belirterek veya doğrudan bir betik içinde <function>dl</function>
      işlevini kullanarak verebilirsiniz.
     </para>
     <para>
      <informalexample>
       <programlisting role="shell">
<![CDATA[
./configure --with-apache=/bir/yer/apache_kaynak_paketi --with-pgsql
]]>
       </programlisting>
      </informalexample>
     </para>
     <para>
      Bu yapılandırmayla, bir <filename>libmodphp5.a</filename> kütüphanesi,
      <filename>mod_php5.c</filename> diye bir dosya ve bunlara eşlik eden
      bazı dosyalar oluşturulacak ve bunlar Apache kaynak ağacının altında
      <literal>src/modules/php5</literal> dizinine kopyalanacaktır. Bundan
      sonra Apache
      <literal>--activate-module=src/modules/php5/libphp5.a</literal>
      seçeneği kullanılarak derlendiğinde Apache
      <filename>libphp5.a</filename> kütüphanesini oluşturacak ve onu
      <filename>httpd</filename> çalıştırılabiliri ile
      statik olarak ilintileyecektir. PostgreSQL desteği de doğrudan
      <filename>httpd</filename> çalıştırılabiliri içinde olacaktır. Böylece
      sonuçta tek bir <filename>httpd</filename> çalıştırılabiliri Apache ve
      PHP'nin tamamını içerecektir.
     </para>
     <para>
      <informalexample>
       <programlisting role="shell">
<![CDATA[
./configure --with-apache=/bir/yer/apache_kaynak_paketi --with-pgsql=shared
]]>
       </programlisting>
      </informalexample>
     </para>
     <para>
      Yukarıdakinden farklı olarak PostgreSQL desteği, doğrudan sonuncu
      <filename>httpd</filename> çalıştırılabiliri içinde değil, ayrı bir
      <filename>pgsql.so</filename> paylaşımlı kütüphanesiyle &php.ini;
      dosyası üzerinden veya doğrudan <function>dl</function> işlevi
      kullanılarak PHP'ye yüklemek suretiyle elde edilecektir.
     </para>
     <para>
      PHP'yi derlemek için seçtiğiniz her yolun getirileri olacağı gibi
      götürüleri de olacaktır. Paylaşımlı nesne olarak derlemek, Apache'yi
      ayrı olarak derleyip, PHP ile ilgili hiçbir şey için Apache'yi tekrar
      derleme ihtiyacı duymamak demektir. PHP'yi Apache içinde (statik yöntem)
      derlerseniz PHP daha çabuk yüklenecek ve daha hızlı çalışacaktır. Bu
      konularda daha ayrıntılı bilgi edinmek için Apache'nin <link
      xlink:href="&url.apachedso;">DSO desteği</link> sayfasına bakınız.
     </para>
    <note>
     <para>
      Apache'nin öntanımlı &httpd.conf; dosyası şöyle bir bölümle gelmektedir:
      <informalexample>
       <programlisting role="apache-conf">
<![CDATA[
User nobody
Group "#-1"
]]>
       </programlisting>
      </informalexample>
      Burada <code>Group</code> satırı, <literal>Group nogroup</literal> veya
      <literal>Group daemon</literal>  gibi bir satırla değiştirilmedikçe,
      PHP dosyaları açamayacaktır.
     </para>
    </note>
    <note>
     <para>
      <option role="configure">--with-apxs=/bir/yer/apxs</option> seçeneğini
      kullanırken apxs'in kaynak paketindeki yerini değil, sisteminizde
      kurulu olduğu yeri belirtmeye dikkat edin.
     </para>
    </note>
   </sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
