<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 0ad6aa08fb58311737ae61515d12651d7f14626e Maintainer: nilgun Status: ready -->
<appendix xml:id="userlandnaming" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Kullanıcı Alanı İsimlendirme Kılavuzu</title>
 <para>
  Bu belge, PHP kullanıcısı tarafından betimleyicilerin en iyi nasıl
  seçilebileceğini açıklayan bir kılavuzdur. Bir kodun küresel isim alanını
  oluşturan isimler seçilirken, bunların gelecekteki PHP sürümlerinde
  kullanılması olası isimlerle çakışmayacak şekilde seçilmesi için aşağıdaki
  açıklamaları hesaba katmak önem kazanmaktadır.
 </para>

 <section xml:id="userlandnaming.globalnamespace">
  <title>Küresel İsim alanı</title>
  <para>
   Küresel isim alanında kullanılabilecek oluşumlar:
  </para>

  <itemizedlist>
   <listitem><para>işlevler</para></listitem>
   <listitem><para>sınıflar</para></listitem>
   <listitem><para>arayüzler</para></listitem>
   <listitem><para>sabitler (sınıf sabitleri hariç)</para></listitem>
   <listitem>
    <para>işlev/yöntemlerin dışında tanımlanmış değişkenler</para>
   </listitem>
  </itemizedlist>
 </section>

 <section xml:id="userlandnaming.rules">
  <title>Kurallar</title>
  <para>
   Aşağıdaki listede, PHP'nin yeni yerleşik betimleyicileri için isim
   seçerken projeye tanıdığı haklar belirtilmiştir. Bu liste resmi kodlama
   standartlarından (<link xlink:href="&url.userlandnaming.cs;">CODING
   STANDARDS</link>) alıntıdır:
  </para>

  <itemizedlist>
   <listitem>
    <para>
     PHP tepe seviye isim alanını kendine ayırmış olsa da açıkça uyumsuz
     olmaktan kaçınılmaya ve titiz bir şekilde daha açıklayıcı isimler
     bulunmaya çalışılır.
    </para>
   </listitem>
   <listitem>
    <para>
     İşlev isimlerinde sözcükler arasında altçizgi imleri kullanılırken sınıf
     isimlerinde hörgüçlü ve Pascal yazım tarzlarının ikisi de kullanılır.
    </para>
   </listitem>
   <listitem>
    <para>
     PHP, eklentilerin küresel betimleyicilerinin önüne eklenti isimlerini
     getirir (geçmişten kalma bazı istisnalar vardır). Örnekler:
    </para>

    <itemizedlist>
     <listitem><para><function>curl_close</function></para></listitem>
     <listitem><para><function>mysql_query</function></para></listitem>
     <listitem><para>PREG_SPLIT_DELIM_CAPTURE</para></listitem>
     <listitem><para>new DOMDocument()</para></listitem>
     <listitem>
      <para>
       <function>strpos</function> (geçmişte yapılan bir yanlışlık)
      </para>
     </listitem>
     <listitem><para>new SplFileObject()</para></listitem>
    </itemizedlist>
   </listitem>
   <listitem>
    <para>
     Yineleyicilerin ve istisnaların betimleyicilerinin ardına
     "<literal>Iterator</literal>" ve "<literal>Exception</literal>"
     getirilir. Örnekler:
    </para>
    <itemizedlist>
     <listitem><para><classname>ArrayIterator</classname></para></listitem>
     <listitem><para><classname>LogicException</classname></para></listitem>
    </itemizedlist>
   </listitem>
   <listitem>
    <para>
     PHP, <literal>__</literal> ile başlayan tüm betimleyicileri kendine
     ayırmıştır. Belgelenmiş sihirli işlevselliği kullanmak dışında
     <literal>__</literal> ile başlayan betimleyiciler kullanmamanızı
     öneririz. Örnekler:
    </para>
    <itemizedlist>
     <listitem><para><link linkend="object.get">__get()</link></para></listitem>
     <listitem><para><function>__autoload</function></para></listitem>
    </itemizedlist>
   </listitem>
  </itemizedlist>
 </section>

 <section xml:id="userlandnaming.tips">
  <title>İpuçları</title>
  <para>
   Geleceğe yönelik kod yazmak için, genel isim alanına çok sayıda değişken,
   işlev veya sınıf yerleştirmemeniz önerilir. Bu, 3. taraf koduyla
   adlandırma çakışmalarının yanı sıra gelecekte dile yapılacak olası
   eklemeleri de önleyecektir.
  </para>
  <para>
   İşlevlerin ve sınıfların adlandırma çakışmalarını önlemenin yaygın bir
   yolu, bunları kendi <link linkend="language.namespaces">isim
   alanlarına</link> eklemektir.
  </para>
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
namespace Projem;

function işlevim() {
    return true;
}

\Projem\işlevim();
]]>
   </programlisting>
  </informalexample>
  <para>
   Bu, halihazırda kullanılan isim alanlarını takip etmenizi gerektiriyor,
   ancak bir isim alanına karar verdiğinizde, tekrar çatışmaları düşünmek
   zorunda kalmadan tüm işlevleri ve sınıfları ona ekleyebilirsiniz.
  </para>
  <para>
   Üçüncü taraf koduyla adlandırma çakışmalarını önlemek için genel kapsama
   eklenen değişkenlerin sayısını sınırlamak en iyi uygulama olarak kabul
   edilir.
  </para>
  <note>
   <title>Değişken etki alanı</title>
   <para>
    PHP'nin <link linkend="language.variables.scope">etki alanı belirleme
    kuralları</link> nedeniyle, işlev ve yöntemlerin içinde tanımlanan
    değişkenler genel kapsamda olmadığından küresel etki alanında tanımlanan
    diğer değişkenlerle çakışamaz.
   </para>
  </note>
 </section>

</appendix>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
