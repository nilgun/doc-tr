<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: cfcfe6e059a1edb4d644cf5046d4fc8dfdc27450 Maintainer: nilgun Status: ready -->
<chapter xml:id="pdo.error-handling" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Hatalar ve Ele Alınışları</title>
 <para>
  PDO eklentisi uygulama geliştirme tarzınıza uygun olarak üç farklı hata
  işleme yönteminden birini seçmenize olanak verir.
 </para>
 <itemizedlist>
  <listitem>
   <para>
    <constant>PDO::ERRMODE_SILENT</constant>
   </para>
   <para>
     Bu öntanımlı kiptir. PDO, gerek veritabanı gerekse deyim nesneleri
     üzerinde <function>PDO::errorCode</function> ve
     <function>PDO::errorInfo</function> işlevlerini kullanarak hata kodunu
     sizin için hazır hale getirir. Eğer hata bir deyim nesnesiyle ilgili bir
     işlev veya yöntem çağrısından kaynaklanmışsa bu nesne üzerinde
     <function>PDOStatement::errorCode</function> veya
     <function>PDOStatement::errorInfo</function> işlevini kendiniz
     çağırmalısınız. Eğer hata bir veritabanı nesnesiyle ilgili bir işlev veya
     yöntem çağrısından kaynaklanmışsa bu işlevleri bu kez veritabanı nesnesi
     üzerinde çağırmalısınız.
    </para>
  </listitem>
  <listitem>
   <para>
    <constant>PDO::ERRMODE_WARNING</constant>
   </para>
   <para>
     Hata kodu ayarlarına ek olarak, PDO geleneksel bir E_WARNING uyarısı da
     verir. Bu kip, hata ayıklama ve denemeler sırasında uygulama akışının
     kesilmeden oluşan sorunları görmek için kullanışlıdır.
    </para>
   </listitem>
   <listitem>
    <para>
     <constant>PDO::ERRMODE_EXCEPTION</constant>
    </para>
    <para>
     Hata kodu ayarlarına ek olarak, PDO bir
     <classname>PDOException</classname> istisnası yavrulayıp hata kodunu ve
     iletisini nesnenin özelliklerine yerleştirir. Bu kip de hata ayıklama
     sırasında uygulama akışının kesilmeden oluşan sorunları çabucak görüp
     müdahale etmek için kullanışlıdır. (Dikkat: Eğer istisna betiğin
     sonlanmasına sebep olursa veri hareketleri (transactions) otomatik
     olarak başa sarılır.)
    </para>
    <para>
     Bu kip bir istisna nesnesi ile çalıştığından, hataların, her veritabanı
     çağrısında dönen değere bakmaktan, sessiz kipi kullanmaktan ve geleneksel
     PHP tarzı uyarılardan daha iyi ve daha kolay işleme sokulmasını sağlar.
    </para>
    <para>
     PHP'deki istisna nesneleri hakkında bilgi edinmek için
     <xref linkend="language.exceptions" /> bölümüne bakınız.
    </para>
   </listitem>
 </itemizedlist>
 <para>
  PDO  SQL-92 SQLSTATE hata kodu dizgelerinin kulanımını standartlaştırmıştır;
  her PDO sürücüsü kendi kodunu SQLSTATE kodlarına uydurmakla yükümlüdür.
  <function>PDO::errorCode</function> yöntemi tek bir SQLSTATE kodu döndürür.
  Bir hata ile ilgili daha özel bilgiye gerek duyulursa, SQLSTATE kodundan
  başka sürücüye özgü hata kodunu ve iletisini içeren bir dizi döndüren
  <function>PDO::errorInfo</function> yöntemi kullanılabilir.
 </para>
 <para>
  <example>
   <title>- PDO örneği oluşturup hata kipini atamak</title>
   <programlisting role="php">
<![CDATA[
<?php
$dsn = 'mysql:dbname=testdb;host=127.0.0.1';
$user = 'dbuser';
$password = 'dbpass';

try {
    $dbh = new PDO($dsn, $user, $password);
    $dbh->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
} catch (PDOException $e) {
    echo 'Connection failed: ' . $e->getMessage();
}

?>
]]>
   </programlisting>
  </example>
 </para>
 <note>
  <para>
   Eğer bağlantı başarısız olursa, hangi <constant>PDO::ATTR_ERRMODE</constant>
   hata kipinin atanmış olduğuna bakmaksızın
   <function>PDO::__construct</function> daima bir
   <classname>PDOException</classname> yavrular. Yakalanmayan istisnalar
   ölümcüldür.
  </para>
 </note>
 <para>
  <example>
   <title>- PDO örneği oluşturup kurucudaki hata kipini atamak</title>
   <programlisting role="php">
<![CDATA[
<?php
$dsn = 'mysql:dbname=test;host=127.0.0.1';
$user = 'googleguy';
$password = 'googleguy';

/*
    Kurucu etrafında try/catch kullanımı ERRMODE'u WARNING olarak ayarlasak
    bile geçerlidir, çünkü PDO::__construct, bağlantı başarısız olursa daima
    bir PDOException oluşturur.
*/
try {
    $dbh = new PDO($dsn, $user, $password, array(PDO::ATTR_ERRMODE => PDO::ERRMODE_WARNING));
} catch (PDOException $e) {
    echo 'Bağlantı kurulamadı: ' . $e->getMessage();
    exit;
}

// Bu, PDO'nun bir istisna yerine E_WARNING seviyesinde bir hata
// yavrulamasına sebep olur (tablo mevcut olmadığında)
$dbh->query("SELECT wrongcolumn FROM wrongtable");
?>
]]>
   </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Warning: PDO::query(): SQLSTATE[42S02]: Base table or view not found: 1146 Table 'test.wrongtable' doesn't exist in
/tmp/pdo_test.php on line 18
]]>
    </screen>
  </example>
 </para>
</chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

