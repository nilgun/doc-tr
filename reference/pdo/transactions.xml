<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: a56106f69198dfe88c6084593c78a71c26b24353 Maintainer: nilgun Status: ready -->
<chapter xml:id="pdo.transactions" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Hareketler ve Ototeslim</title>
 <para>
  Bir veritabanına PDO üzerinden bağlantı kuracaksanız, sorgulara başlamadan
  PDO'nun toplu hareketleri nasıl yönettiğini bilmek zorundasınız. Daha önce
  toplu hareketler (transactions) ile çalışmadıysanız
  şu dört ana özelliği bilmenizde yarar var: Dayanıklılık, Atomsallık, Yalıtım
  ve Tutarlılık (DAYT). Layman kuralları gereğince, bir toplu hareket olarak
  yürütülen bir işleme başlanıldığı takdirde, aşamalar halinde bile yürütülse,
  diğer bağlantılarla etkileşime girmeksizin veritabanına güvenle uygulanacağı
  garanti edilir. Ayrıca, toplu hareketler, istediğiniz taktirde (sanki işleme
  hiç başlamamışsınız gibi) otomatik olarak geri alınır ve betiğinizin
  hatalarla daha kolay başa çıkmasını sağlar.
 </para>
 <para>
  Toplu hareketler genellikle bir defada uygulanacak işlemlerin bir betik (bir
  SQL deyimleri betiği) haline getirilmesiyle oluşur. Bunun
  bu güncellemelerin verimliliğini esaslı bir şekilde arttırmak gibi bir yan
  etkisi de vardır. Başka bir deyişle, toplu hareketler betiğinizin daha hızlı
  ve daha tutarlı çalışmasını sağlar (ancak, bunu sağlamak için toplu
  hareketleri doğru yerde kullanmanız gerekir).
 </para>
 <para>
  Talihsizliğe bakın ki, her veritabanı toplu hareketleri desteklemez, bu
  yüzden PDO, önce bağlantı açılmasını gerektiren ve ototeslim kipi
  denen kipte çalışmak zorunda kalır. Ototeslim kipinde,
  çalıştırdığınız her sorgu veritabanı hareketleri destekliyorsa dolaylı
  olarak bir harekettir, desteklemiyorsa değildir. İhtiyacınız toplu
  hareketleri kullanmaksa hareketleri ilklendirmek için
  <function>PDO::beginTransaction</function> yöntemini kullanmalısınız. Eğer
  kullanmaya çalıştığınız veritabanı toplu hareketleri desteklemiyorsa bir
  <classname>PDOException</classname> istisnası yavrulanır (hata işleme
  ayarlarınızdan bağımsız olarak: bu daima bir dizi hata durumundan oluşur).
  Bir toplu hareketi ilklendirdikten sonra hareketi başlatmak için
  <function>PDO::commit</function>, hareketler yerine getirilirken
  çalıştırdığınız kodun başarı durumuna bağlı olarak hareketleri geri almak
  için <function>PDO::rollBack</function> yöntemini kullanabilirsiniz.
 </para>
 <warning>
  <para>
   PDO, yalnızca sürücü düzeyinde işlem yeteneklerini denetler. Belirli çalışma
   zamanı koşulları hareketlerin kullanılamaz olduğu anlamına geliyorsa, fakat
   veritabanı sunucusu bir hareket başlatmak üzere isteği kabul ederse
   <methodname>PDO::beginTransaction</methodname> yine de hata vermeksizin
   &true; döndürecektir.
  </para>
  <para>
   Buna bir örnek, bir MySQL veritabanında MyISAM tabloları üzerinde hareketleri
   kullanmaya çalışmak olurdu.
  </para>
 </warning>
 <para>
  Bir toplu hareket veritabanına gönderilmişken bir nedenle betiğiniz
  sonlanırsa veya bağlantı kapatılmaya çalışılırsa PDO otomatik olarak
  hareketleri geri alır. Bu, betiğin beklenmedik durumlarda sonlanmasına karşı
  veritabanındaki verilerin tutarsız hale gelmesini önleyecek bir güvenlik
  önlemidir. Ancak toplu hareketleri doğrudan siz başlatmadıysanız bir şeyler
  zaten yolunda gitmemiş demektir, dolayısıyla verilerinizin güvenliği için
  hareketlere başa sarma işlemi uygulanır.
 </para>
 <warning>
  <para>
   Otomatik başa sarma işlemi sadece toplu hareketler
   <function>PDO::beginTransaction</function> üzerinden ilklendirildiğinde
   uygulanır. Bir toplu hareket PDO'sunu başlatan bir sorguyu el yordamıyla
   kendiniz başlatırsanız, neler olacağı bilinemez ve yanlış giden bir şeyler
   olursa bunlar geri alınamaz.
  </para>
 </warning>
 <para>
  <example><title>- Bir toplu hareket betiğinin çalıştırılması</title>
   <para>
    Aşağıdaki örnekte, yeni bir çalışan için 23 numaralı bir girdi kümesi
    oluşturduğumuzu varsayıyoruz. Şahıs için girilen temel bilgilere ilaveten
    ücretini de kaydedeceğiz. Bu basit işlemi iki ayrı güncelleme ile yapmak
    mümkünse de bu iki deyimi <function>PDO::beginTransaction</function> ve
    <function>PDO::commit</function> çağrılarının arasına alıp bir sebeple
    işlem tamamlanamazsa yapılanların geri alınmasını garantilemiş olacağız.
    Eğer bir şeyler yolunda gitmezse <literal>catch</literal> kümesi haraket
    başladığından beri yapılan işlemleri geri alır ve bir hata iletisi basar.
   </para>
   <programlisting role="php">
<![CDATA[
<?php
try {
  $dbh = new PDO('odbc:SAMPLE', 'db2inst1', 'ibmdb2',
      array(PDO::ATTR_PERSISTENT => true));
  echo "Bağlantı kuruldu\n";
} catch (Exception $e) {
  die("Bağlanılamadı: " . $e->getMessage());
}

try {
  $dbh->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);

  $dbh->beginTransaction();
  $dbh->exec("insert into staff (id, first, last) values (23, 'Joe', 'Bloggs')");
  $dbh->exec("insert into salarychange (id, amount, changedate)
      values (23, 50000, NOW())");
  $dbh->commit();

} catch (Exception $e) {
  $dbh->rollBack();
  echo "İşlem başarısız oldu: " . $e->getMessage();
}
?>
]]>
   </programlisting>
  </example>
 </para>
 <para>
  Güncellemeleri birer toplu hareket olarak yapmak zorunda değilsiniz. Almak
  istediğiniz veriler için karmaşık sorgular yapabileceğiniz gibi elde
  ettiğiniz verilerle başka sorgular ve güncellemeler yapmanızda da mümkündür.
  Ancak, bu arada bir toplu hareket işlemi yürütülüyorsa, bu çalışmanın
  ortasında kimsenin hiçbir veriyi değiştiremeyeceği garanti altındadır. Toplu
  hareketlerle ilgili daha ayrıntılı bilgi için veritabanı sunucunuzun
  belgelerine bakınız.
 </para>
</chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

