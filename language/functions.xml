<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 4f04bd50ed71039b89e2b9a5aba7e53e74cac4c6 Maintainer: nilgun Status: ready -->
<!-- CREDITS: tpug, sezer -->
 <chapter xml:id="language.functions" xmlns="http://docbook.org/ns/docbook">
  <title>İşlevler</title>

  <sect1 xml:id="functions.user-defined">
   <title>Kullanıcı tanımlı işlevler</title>
   <para>
    Bir işlev, şöyle bir söz dizimi kullanılarak tanımlanabilir:
   </para>
   <para>
    <example>
     <title>- İşlev kullanımını gösteren sözde kod</title>
     <programlisting role="php">
<![CDATA[
<?php
function foo($arg_1, $arg_2, /* ..., */ $arg_n)
{
    echo "Örnek işlev.\n";
    return $retval;
}
?>
]]>
     </programlisting>
    </example>
   </para>

   <simpara>
    Bir işlevin içerisinde geçerli her tür PHP kodu kullanılabilir, buna
    başka işlevler ve <link linkend="language.oop5.basic.class">sınıf</link>
    tanımları da dahildir.
   </simpara>
   <para>
    İşlev isimleri, PHP'deki diğer isimlerle aynı kurallara tabidir. Geçerli
    bir işlev ismi bir harf ya da alt çizgi ile başlar, herhangi bir sayıda
    geçerli harf, sayı ya da alt çizgi ile devam eder. Düzenli ifade olarak,
    şu şekilde ifade edebiliriz:
   <code>^[a-zA-Z_\x80-\xff][a-zA-Z0-9_\x80-\xff]*$</code>.
   </para>
   <simpara>
    İşlevlerin çağrılmadan önce tanımlanmaları, aşağıdaki iki örnekte
    görüldüğü gibi koşullu olarak tanımlandıkları durumlar haricinde gerekmez.
   </simpara>
   <para>
    Bir işlev aşağıdaki iki örnekte gösterildiği gibi koşullu olarak
    tanımlandıysa, bu işlev tanımının işlev çağrılmadan <emphasis>önce</emphasis> yapılması gerekmektedir.
   </para>
   <para>
    <example>
     <title>- Koşula bağlı işlevler</title>
     <programlisting role="php">
<![CDATA[
<?php

$makefoo = true;

/* Henüz varolmadığı için foo() buradan çağrılamaz,
   ancak bar() çağrılabilir */

bar();

if ($makefoo) {
  function foo()
  {
    echo "Uygulamanın çalışması bana erişene kadar ben yokum.\n";
  }
}

/* $makefoo doğru olduğundan
   artık foo() çağrılabilir */

if ($makefoo) foo();

function bar()
{
  echo "Program başlatıldığı anda ben de varolurum.\n";
}

?>
]]>
     </programlisting>
    </example>
   </para>
   <para>
    <example>
     <title>- İşlev içinde işlev</title>
     <programlisting role="php">
<![CDATA[
<?php
function foo()
{
  function bar()
  {
    echo "foo() çağrılana kadar yokum.\n";
  }
}

/* Henüz varolmadığı için
   bar() çağrılamaz. */

foo();

/* Artık bar() çağrılabilir,
   foo() çağrıldığında bar()
   erişilebilir hale gelir */

bar();

?>
]]>
     </programlisting>
    </example>
   </para>
   <para>
    PHP'de tüm işlevler ve sınıflar betik genelinde geçerlidir - bir işlevin
    içinden bile tanımlanmış olsalar işlevin dışından çağrılabilirler.
   </para>
   <simpara>
    PHP işlevlerin farklı değiştirgeli yeni tanımlarının yapılmasını
    desteklemediği gibi, işlevler yeniden tanımlanamaz veya tanımsız
    kılınamaz.
   </simpara>
   <note>
    <simpara>
      İşlev isimleri <literal>A</literal>'dan <literal>Z</literal>'ye kadar
      ASCII karakterler için büyük-küçük harf duyarsızdır, ancak işlev isimlerini tanımlandıkları halleriyle kullanmak daha iyidir.
    </simpara>
   </note>
   <simpara>
    <link linkend="functions.variable-arg-list">Değiştirge sayısı değişken
    işlevler</link> desteklendiği gibi işlevlerde <link
    linkend="functions.arguments.default">öntanımlı değiştirge</link>
    kullanımı da desteklenmektedir. Daha ayrıntılı bilgi edinmek için
    <function>func_num_args</function>, <function>func_get_arg</function> ve
    <function>func_get_args</function> işlevlerine de bakınız.
   </simpara>

   <para>
    PHP'de işlevlerin kendilerini çağırması da mümkündür.
    <example>
     <title>- Kendini çağıran işlev</title>
     <programlisting role="php">
<![CDATA[
<?php
function recursion($a)
{
    if ($a < 20) {
        echo "$a\n";
        recursion($a + 1);
    }
}
?>
]]>
     </programlisting>
    </example>
    <note>
     <simpara>
     Kendini çağıran işlev ve yöntemler bunu 100-200 kere yaparsa yığıt
     taşabilir ve çalışan betiğin durdurulmasına sebep olabilir. Özellikle,
     kendini çağırma sayısı sonsuza giderse bu bir programlama hatası sayılır.
     </simpara>
    </note>
   </para>

  </sect1>

  <sect1 xml:id="functions.arguments">
   <title>İşlev değiştirgeleri</title>

   <simpara>
    Bir işleve veri, virgül ayraçlı ifadelerden oluşan bir değiştirge listesi
    ile aktarılır. Değitirgeler soldan sağa doğru değerlendirilir.
   </simpara>
   <para>
    PHP, değiştirgelerin değerleriyle aktarılmalarını (öntanımlı), <link
    linkend="functions.arguments.by-reference">gönderimli aktarım</link>ı ve
    <link linkend="functions.arguments.default">öntanımlı değiştirge
    kullanımı</link>nı destekler. <link
    linkend="functions.variable-arg-list">Değiştirge sayısı değişken
    işlevler</link> de desteklenmektedir.
   </para>
   <para>
    <example>
     <title>- İşlevlere dizi aktarımı</title>
     <programlisting role="php">
<![CDATA[
<?php
function dizi_kabul_eder($girdi)
{
    echo "$girde[0] + $girdi[1] = ", $girdi[0]+$girdi[1];
}
?>
]]>
     </programlisting>
    </example>
   </para>
   <para>
    PHP 8.0.0'dan itibaren, işlev değiştirgelerinin sonunda göz ardı edilecek
    bir virgül bulunabilir. Bu, özellikle değiştirge listesinin uzun olduğu
    veya uzun isimler içerdiği durumlarda, değiştirgeleri alt alta sıralamayı
    kolaylaştırır.
   </para>
   <para>
   <example>
    <title>- Virgül ile sonlanan işlev değiştirgeleri örneği</title>
    <programlisting role="php">
<![CDATA[
<?php
function takes_many_args(
    $first_arg,
    $second_arg,
    $a_very_long_argument_name,
    $arg_with_default = 5,
    $again = 'a default string', // 8.0.0 öncesinde bu virgüle izin verilmezdi.
)
{
    // ...
}
?>
]]>
    </programlisting>
   </example>
   </para>
   <para>
    PHP 8.0.0'dan itibaren, zorunlu değiştirgelerin seçimlik değiştirgelerden
    sonra aktarımı kullanımdan kaldırılmıştır. Bu sorun genellikle öntanımlı
    değeri yazmamak suretiyle çözümlenebilir. Bunun tek istisnası &null;
    öntanımlamasının türü örtük olarak nullable yapan <code>Type $param =
    null</code> şeklindeki değiştirgelerdir. Bu kullanımda kalmışsa da örtük
    bir nullable türü kullanılacaksa önerilir.
   </para>
   <para>
   <example>
    <title>- Zorunlu değiştirgelerin seçimliklerden sonra kullanımı</title>
    <programlisting role="php">
<![CDATA[
<?php
function foo($a = [], $b) {} // Önce
function foo($a, $b) {}      // Sonra

function bar(A $a = null, $b) {} // Hala kullanımda
function bar(?A $a, $b) {}       // Önerilen
?>
]]>
    </programlisting>
   </example>
   </para>

   <sect2 xml:id="functions.arguments.by-reference">
    <title>Gönderimli değiştirge kullanımı</title>

    <simpara>
      Öntanımlı olarak, işlev değiştirgeleri değerleriyle aktarılırlar (bu
      durumda bir değiştirgenin değeri işlev içinde değiştirildiğinde işlevin
      çağrıldığı yerdeki değeri bundan etkilenmez. İşlevin çağrıldığı yerdeki
      değerinin de değişmesini istiyorsanız gönderimli değiştirge
      kullanmalısınız.
    </simpara>
    <para>
      Bir işleve bir değiştirgenin daima gönderimli olarak aktarılmasını
      istiyorsanız, işlev tanımladığınız yerde o değiştirgenin başına &amp;
      karakterini koyarak bunu sağlayabilirsiniz:
    </para>
    <para>
     <example>
      <title>- Gönderimli işlev değiştirgelerinin aktarımı</title>
      <programlisting role="php">
<![CDATA[
<?php
function şunu_da_ekle(&$dizge)
{
    $dizge .= 've bir kaç karakter eklenmiştir.';
}
$dzg = 'Bu bir dizgedir ';
şunu_da_ekle($dzg);
echo $dzg;    // 'Bu bir dizgedir ve bir kaç karakter eklenmiştir.'
              //  çıktısını verir.
?>
]]>
      </programlisting>
     </example>
    </para>
    <para>
     Başvuruyla iletilmesi beklenen bir değeri değiştirge olarak iletmek
     bir hatadır.
    </para>
   </sect2>

   <sect2 xml:id="functions.arguments.default">
    <title>Öntanımlı değiştirge değerleri</title>

    <para>
      Bir işlevde, sayıl değiştirgeler için C++ tarzı öntanımlı değerler
      aşağıdaki biçimde tanımlanabilir:
    </para>
    <para>
     <example>
      <title>- İşlev içinde öntanımlı değiştirge kullanımı</title>
      <programlisting role="php">
<![CDATA[
<?php
function kahveyap($hangisi = "orta şekerli")
{
    return "Bir fincan $hangisi kahve yapalım.\n";
}
echo kahveyap();
echo makecoffee(null);
echo kahveyap("az şekerli");
?>
]]>
      </programlisting>
      &example.outputs;
     <screen>
<![CDATA[
Bir fincan orta şekerli kahve yapalım.
Bir fincan kahve yapalım.
Bir fincan az şekerli kahve yapalım.
]]>
      </screen>
     </example>
    </para>
    <para>
      PHP ayrıca, öntanımlı değer olarak dizilerin ve özel &null; türünün
      kullanımına da izin verir, örneğin:
    </para>
    <para>
     <example>
      <title>- Sayıl olmayan türlerin öntanımlı değer olarak kullanımı</title>
      <programlisting role="php">
<![CDATA[
<?php
function kahveyap($hangi = array("orta şekerli"), $neyde = NULL)
{
    $neyde = is_null($neyde) ? "ocakta" : $neyde;
    return "Bir fincan ".join(" bir fincan ", $hangi)." kahve $neyde yapıldı.\n";
}
echo kahveyap();
echo kahveyap(array("çok şekerli", "az şekerli"), "mangalda");
?>
]]>
      </programlisting>
     </example>
    </para>

    <simpara>
      Öntanımlı değer bir değişken, bir sınıf üyesi ya da bir işlev çağrısı
      değil, bir sabit ifadesi olmalıdır.
    </simpara>
    <para>
      Öntanımlı değiştirgeleri kullanırken, öntanımlama yapılmış tüm
      değiştirgelerin öntanımlama yapılmamış tüm değiştirgelerin sağında yer
      almasına gerektiğine dikkat edin. Aksi takdirde işler yolunda
      gitmeyebilir. Aşağıdaki kod parçasını inceleyin:
    </para>
    <para>
     <example>
      <title>- Öntanımlı değiştirgelerin hatalı kullanımı</title>
      <programlisting role="php">
<![CDATA[
<?php
function yoğurtyap($nekadar = "az", $neli)
{
    return "Bir kase $nekadar $neli yoğurt yap.\n";
}

echo yoğurtyap("çilekli");   // beklendiği gibi çalışmayacaktır
?>
]]>
      </programlisting>
      &example.outputs;
      <screen>
<![CDATA[
Warning: Missing argument 2 for yoğurtyap(), called in
/home/nilgun/dnm/php-dnm on line 7 and defined in
/home/nilgun/dnm/php-dnm on line 2
Bir kase çilekli  yoğurt yap.
]]>
      </screen>
     </example>
    </para>
    <para>
      Şimdi, yukarıdakini bununla karşılaştıralım:
    </para>
    <para>
     <example>
      <title>- Öntanımlı değiştirgelerin doğru kullanımı</title>
      <programlisting role="php">
<![CDATA[
<?php
function yoğurtyap($neli, $nekadar= "az")
{
    return "Bir kase $nekadar $neli yoğurt yap.\n";
}

echo yoğurtyap("çilekli");   // beklendiği gibi çalışır
?>
]]>
      </programlisting>
      &example.outputs;
      <screen>
<![CDATA[
Bir kase az çilekli yoğurt yap.
]]>
      </screen>
     </example>
    </para>

    <note>
     <simpara>
      Gönderimli aktarılabilen değiştirgeler öntanımlı değer içerebilir.
     </simpara>
    </note>
   </sect2>

   <sect2 xml:id="functions.variable-arg-list">
    <title>Değişken uzunlukta değiştirge listesi</title>

    <simpara>
     PHP, kullanıcı tanımlı işlevlerde değiştirge listesinin sonuna
     <literal>...</literal> konarak listenin uzatılmasını destekler.
    </simpara>

    <note>
     <simpara>
      Değişken uzunlukta değiştirge listesi
      <function>func_num_args</function>,
      <function>func_get_arg</function> ve
      <function>func_get_args</function> işlevleri kullanılarak da elde
      edilebilir. Bu teknik <literal>...</literal> kullanımından öncesine ait
      olduğundan kullanımı önerilmez.
     </simpara>
    </note>

    <para>
     Değiştirge listeleri, işlevin değişken sayıda değiştirge kabul ettiğini
     belirtmek için <literal> ... </literal> simgesini içerebilir. Bu durumda
     değiştirgeler değişkene bir dizi olarak aktarılır. Örneğin:
    </para>

    <para>
     <example>
     <title>- Değişken uzunlukta değiştirgeler için <literal>...</literal> kullanımı</title>
     <programlisting role="php">
<![CDATA[
<?php
<?php
function sum(...$numbers) {
    $acc = 0;
    foreach ($numbers as $n) {
        $acc += $n;
    }
    return $acc;
}

echo sum(1, 2, 3, 4);
?>
]]>
     </programlisting>
     &example.outputs;
     <screen>
<![CDATA[
10
]]>
     </screen>
    </example>
   </para>

   <para>
    Bir diziyi, bir <classname>Traversable</classname> değişkeni veya bir
    sabiti değiştirge listesi haline getirmek için işlev çağrılırken de
    <literal>...</literal> kullanılabilir. Örnek:
   </para>
   <para>
    <example>
     <title> Değiştirgelere erişmek için <literal>...</literal>
        kullanımı</title>
     <programlisting role="php">
<![CDATA[
<?php
function add($a, $b) {
    return $a + $b;
}

echo add(...[1, 2])."\n";

$a = [1, 2];
echo add(...$a);
?>
]]>
     </programlisting>
     &example.outputs;
     <screen>
<![CDATA[
3
3
]]>
     </screen>
    </example>
   </para>

   <para>
    <literal>...</literal> dizgeciğinden önce normal konumsal değiştirgeler
    belirtilebilir. Bu durumda <literal>...</literal> ile üretilen diziye
    sadece bir konumsal değiştirge ile eşleşmeyen tokeni izleyen değiştirgeler
    eklenir.
   </para>

   <para>
   <example>
      <title>Değişken değiştirgelerinde tür bildirimi</title>
      <programlisting role="php">
<![CDATA[
<?php
function total_intervals($unit, DateInterval ...$intervals) {
    $time = 0;
    foreach ($intervals as $interval) {
        $time += $interval->$unit;
    }
    return $time;
}

$a = new DateInterval('P1D');
$b = new DateInterval('P2D');
echo total_intervals('d', $a, $b).' gün';

// Bir DateInterval nesnesi olmadığından bu başarısız olur.
echo total_intervals('d', null);
?>
]]>
       </programlisting>
       &example.outputs;
       <screen>
<![CDATA[
3 gün
Catchable fatal error: Argument 2 passed to total_intervals() must be an instance of DateInterval, null given, called in - on line 14 and defined in - on line 2
]]>
       </screen>
      </example>
     </para>

     <para>
      Son olarak, <literal>...</literal> dizgeciğinin önüne bir
       <literal>&amp;</literal> ekleyerek değişken değiştirgelerini
       <link linkend="functions.arguments.by-reference">gönderimli</link>
       olarak da aktarabilirsiniz.
     </para>

    <sect3 xml:id="functions.variable-arg-list.old">
     <title>Daha eski PHP sürümlerinde</title>

     <para>
      Bir işlevin değişken sayıda değiştirge içerebilmesi özel bir sözdizimi
      gerekmez; ancak işlevin değiştirgelerine erişim için
      <function>func_num_args</function>, <function>func_get_arg</function>
      ve <function>func_get_args</function> kullanmak gerekir.
     </para>

     <para>
      Eski PHP sürümlerinde yukarıdaki ilk örnek şöyle gerçeklenirdi;
     </para>
     <para>
      <example>
       <title>Eski PHP sürümlerinde değişken değiştirgelerine erişim</title>
       <programlisting role="php">
<![CDATA[
<?php
function sum() {
    $acc = 0;
    foreach (func_get_args() as $n) {
        $acc += $n;
    }
    return $acc;
}

echo sum(1, 2, 3, 4);
?>
]]>
       </programlisting>
       &example.outputs;
       <screen>
<![CDATA[
10
]]>
       </screen>
      </example>
     </para>
    </sect3>
   </sect2>

   <sect2 xml:id="functions.named-arguments">
    <title>İsimli değiştirgeler</title>

    <para>
     PHP 8.0.0, var olan konumsal değitirgelerin bir uzantısı olarak isimli
     değiştirgeleri tanıttı. İsimli değiştirgeler, değiştirgelerin konuma göre
     değil değiştirge adına göre işleve iletilmesine izin verir. Bu,
     değiştirgenin anlamını kendi kendine belgelendirir, değiştirgeleri
     sıralamadan bağımsız hale getirir ve öntanımlı değerlerin keyfi olarak
     atlanmasına izin verir.
    </para>

    <para>
     İsimli değiştirgeler, değerin önüne iki nokta üst üste ile değiştirge adı
     eklenerek iletilir. Ayrılmış anahtar sözcüklerin değiştirge adları olarak
     kullanılmasına izin verilir. Değiştirge adı bir tanımlayıcı olmalıdır,
     bir değişkenle belirtilmesine izin verilmez.
    </para>
    <para>
     <example>
      <title>- İsimli değiştirge sözdizimi</title>
      <programlisting role="php">
<![CDATA[
<?php
işlevim(değiştirgeAdı: $değer);
array_foobar(array: $değer);

// desteklenmiyor
işlev_adı($değişkeneSaklanmışDeğiştirgeAdı: $$değer);
?>
]]>
      </programlisting>
     </example>
     <example>
      <title>- Konumsal ve isimli değiştirgeler</title>
      <programlisting role="php">
<![CDATA[
<?php
// Konumsal değiştirgeler:
array_fill(0, 100, 50);

// İsimli değiştirgeler:
array_fill(start_index: 0, count: 100, value: 50);
?>
]]>
     </programlisting>
    </example>
   </para>
   <para>
    İsimli değiştirgelerin aktarılma sırasının bir önemi yoktur.
   </para>
   <para>
    <example>
     <title>- Farklı değiştirge sırasıyla yukarıdaki örnek</title>
     <programlisting role="php">
<![CDATA[
<?php
array_fill(value: 50, count: 100, start_index: 0);
?>
]]>
     </programlisting>
    </example>
   </para>
   <para>
     İsimli değiştirgeler konumsal değiştirgelerle birleştirilebilir. Bu
     durumda, isimli değiştirgeler konumsal değiştirgelerden sonra gelmelidir.
     Sıralarına bakılmaksızın, bir işlevin isteğe bağlı değiştirgelerinden
     yalnızca bazılarını belirtmek de mümkündür.
   </para>
   <para>
    <example>
     <title>- İsimli değiştirgelerle konumsal değiştirgeleri birleştirmek
     </title>
     <programlisting role="php">
      <![CDATA[
<?php
htmlspecialchars($string, double_encode: false);
// Same as
htmlspecialchars($string, ENT_COMPAT | ENT_HTML401, 'UTF-8', false);
?>
]]>
     </programlisting>
    </example>
   </para>

   <para>
    Aynı değiştirgeyi birden fazla kullanmak bir Error istisnasına yol açar.
   </para>
   <para>
    <example>
     <title>- Aynı değiştirgeyi birden fazla kullanırken Error istisnası
     </title>
     <programlisting role="php">
      <![CDATA[
<?php
function foo($param) { ... }
foo(param: 1, param: 2);
// Hata: $param isimli değiştirgesi önceki değiştirgeyi geçersiz kılıyor
foo(1, param: 2);
// $param isimli değiştirgesi önceki değiştirgeyi geçersiz kılıyor
?>
]]>
     </programlisting>
    </example>
   </para>
   </sect2>
  </sect1>

  <sect1 xml:id="functions.returning-values">
   <title>Dönen değerler</title>

   <para>
    Değerler, isteğe bağlı return deyimi kullanılarak döndürülür. Diziler ve
    nesneler dahil herhangi bir tür döndürülebilir. Bu, işlevin çalıştırmayı
    hemen bitirmesine ve denetimi çağrıldığı satıra geri aktarmasına neden
    olur. Daha fazla bilgi için <function>return</function> işlevine bakın.
   </para>

   <note>
    <para>
     <function>return</function> kullanılmazsa &null; değeri döndürülür.
    </para>
   </note>

   <para>
    <example>
     <title>- <function>return</function> kullanımı</title>
     <programlisting role="php">
<![CDATA[
<?php
function square($num)
{
    return $num * $num;
}
echo square(4);   // çıktısı: '16'.
?>
]]>
     </programlisting>
    </example>
   </para>
   <para>
    Bir işlev çok sayıda değer döndürebildiği gibi bir dizi döndürerek de aynı
    sonuç sağlanabilir.
   </para>
   <para>
    <example>
      <title>- Çok sayıda değeri bir diziyle döndürmek</title>
      <programlisting role="php">
<![CDATA[
<?php
function small_numbers()
{
    return array (0, 1, 2);
}

list ($zero, $one, $two) = small_numbers();
?>
]]>
      </programlisting>
     </example>
    </para>

    <para>
     Bir işlevden gönderim döndürmek için hem işlev bildiriminde hem de dönen
     değer bir değişkene atandığında gönderim işleci &amp; kullanılır:
    </para>

    <para>
     <example>
      <title>- Bir işlevden gönderim döndürmek</title>
      <programlisting role="php">
<![CDATA[
<?php
function &returns_reference()
{
    return $someref;
}
?>

$newref =& returns_reference();
]]>
      </programlisting>
     </example>
    </para>
    <simpara>
     Gönderimler hakkında daha fazla bilgi için <link
     linkend="language.references">Gönderimlerle İlgili Herşey</link> bölümüne
     bakınız.
    </simpara>
  </sect1>

  <sect1 xml:id="functions.variable-functions">
   <title>Değişken işlevler</title>

   <para>
    PHP değişken işlev kavramını desteklemektedir. Yani, bir değişken isminin
    sonuna parantez eklenmişse, PHP aynı isimde bir işlev olup olmadığına
    bakar ve bulduğu takdirde bu işlevi çalıştırmaya çalışır. Başka olası
    işlemlerin yanında, bu özellik geri çağırımların, işlev tablolarının ve
    benzerlerinin gerçeklenmesinde kullanılabilir.
   </para>
   <para>
    Değişken işlevler,
    <function>echo</function>, <function>print</function>,
    <function>unset</function>, <function>isset</function>,
    <function>empty</function>, <function>include</function>,
    <function>require</function> ve benzeri dil yapılarında çalışmayacaktır.
    Bu yapıları değişken işlev olarak kullanmak istediğiniz takdirde, gerekli
    sarmalayıcı işlevleri kendiniz yazmalısınız.
   </para>
   <para>
    <example>
     <title>- Değişken işlev örneği</title>
     <programlisting role="php">
<![CDATA[
<?php
function foo() {
    echo "In foo()<br />\n";
}

function bar($arg = '')
{
    echo "In bar(); argument was '$arg'.<br />\n";
}

// Bu echo için sarmalayıcı işlevdir
function echoit($string)
{
    echo $string;
}

$func = 'foo';
$func();        // foo() çağrılır

$func = 'bar';
$func('test');  // bar() çağrılır

$func = 'echoit';
$func('test');  // echoit() çağrılır
?>
]]>
     </programlisting>
    </example>
   </para>
   <para>
    Değişken işlev özelliğini kullanarak bir nesnenin bir yöntemini de
    çağırabilmeniz mümkündür.
    <example>
     <title>- Değişken yöntem örneği</title>
     <programlisting role="php">
<![CDATA[
<?php
class Foo
{
    function Variable()
    {
        $name = 'Bar';
        $this->$name(); // Bu Bar() yöntemini çağıracaktır
    }

    function Bar()
    {
        echo "Bu bir Bar";
    }
}

$foo = new Foo();
$funcname = "Variable";
$foo->$funcname();  // Bu $foo->Variable() işlevini çağıracaktır

?>
]]>
     </programlisting>
    </example>
   </para>
   <para>
    Static türünden yöntemleri çağırırken işlev çağrısı 'static property' işlecinden daha güçlüdür:
    <example>
     <title>Statik özellikli yöntem çağrısı örneği</title>
     <programlisting role="php">
<![CDATA[
<?php
class Foo
{
    static $variable = 'static property';
    static function Variable()
    {
        echo 'Method Variable called';
    }
}

echo Foo::$variable; // Bu 'static property' basar. Bu bağlamda $variable gerekmez.
$variable = "Variable";
Foo::$variable();  // Bu bağlamda $variable değişkenini okuyan $foo->Variable() çağrılır.

?>
]]>
     </programlisting>
    </example>
   </para>
   <para>
    <example>
     <title>Karmaşık çağrılar</title>
     <programlisting role="php">
<![CDATA[
<?php
class Foo
{
    static function bar()
    {
        echo "bar\n";
    }
    function baz()
    {
        echo "baz\n";
    }
}

$func = array("Foo", "bar");
$func(); // prints "bar"
$func = array(new Foo, "baz");
$func(); // prints "baz"
$func = "Foo::bar";;
$func(); // "bar" basar
?>
]]>
     </programlisting>
    </example>
   </para>

   <sect2 role="seealso">
    &reftitle.seealso;
    <para>
     <simplelist>
      <member><function>is_callable</function></member>
      <member><function>call_user_func</function></member>
      <member><function>function_exists</function></member>
      <member><link linkend="language.variables.variable">değişken değişkenler </link></member>
     </simplelist>
    </para>
   </sect2>
  </sect1>

  <sect1 xml:id="functions.internal">
   <title>Yerleşik işlevler</title>

   <para>
    PHP standart olarak birçok işlev ve oluşum ile birlikte gelmektedir.
    Bunun yanında, özel PHP eklentilerinin derlenmesini gerektiren, aksi
    takdirde "tanımsız işlev" hatası üreten işlevler de mevcuttur. Örneğin,
    <function>imagecreatetruecolor</function> gibi <link linkend="ref.image"
    >resim</link> işlevlerini kullanabilmek için, PHP'yi
    <productname>GD</productname> desteğiyle derlemiş olmanız gerekir. Ya da,
    <function>mysqli_connect</function> işlevini kullanabilmek için, PHP'nin
    <link linkend="book.mysqli">MySQLi</link> desteği ile derlenmiş olması
    gerekmektedir. Bunların yanında, bütün PHP sürümlerine eklenen <link
    linkend="ref.strings">dizge</link> ve <link linkend="ref.var"
    >değişken</link> işlevleri gibi birçok çekirdek işlev de mevcuttur.
    <function>phpinfo</function> ya da
    <function>get_loaded_extensions</function> işlevlerine yapılacak bir
    çağrı ile PHP'ye hangi eklentilerin yüklenmiş olduğunu görebilirsiniz.
    Birçok uzantı öntanımlı olarak etkinleştirilmiş olup PHP Kılavuzunda bu
    eklentilerle ilgili geniş bilgi verilmiştir. PHP'yi nasıl yapılandırmanız
    gerektiğiyle ilgili bilgiyi <link linkend="configuration"
    >yapılandırma</link> ve <link linkend="install">kurulum</link> bölümleri
    ile eklerdeki özel bölümlerde bulabilirsiniz.
   </para>
   <para>
    Kılavuzun <link linkend="about.prototypes">işlev tanımı nasıl
    okunur</link> bölümünde bir işlev tanımının nasıl okunup anlaşılabileceği
    ile ilgili bilgiler bulunmaktadır. Bir işlevin bir değer mi döndürdüğü
    yoksa aktarılan değerlerle sadece işlem mi yaptığını anlamak önemlidir.
    Örneğin, <function>str_replace</function> değiştirilmiş dizgeyle
    dönerken, <function>usort</function> sadece kendisine aktarılan değer
    üzerinde çalışır. Ayrıca, her kılavuz sayfasında her işlevin
    değiştirgeleri, davranış değişiklikleri, başarı ya da başarısızlık
    durumunda döndürülen değerler ve kullanılabilirlik bilgileri
    bulunmaktadır. Bu önemli (ve sıklıkla algılanması güç) farklılıkların
    bilinmesi, doğru PHP kodunun yazılabilmesi için büyük önem taşımaktadır.
   </para>
   <sect2 role="seealso">
    &reftitle.seealso;
    <para>
     <simplelist>
      <member><function>function_exists</function></member>
      <member><link linkend="funcref">İşlev Başvuru Kılavuzu</link></member>
      <member><function>get_extension_funcs</function></member>
      <member><function>dl</function></member>
     </simplelist>
    </para>
   </sect2>
  </sect1>

  <sect1 xml:id="functions.anonymous">
   <title>Anonim işlevler</title>
   <simpara>
    Anonim işlevler isim belirtmeksizin oluşturulabilen işlevlerdir.
    Çoğunlukla <type>callable</type> türünde değiştirgeler olarak işlev
    değiştirgelerinde kullanılırsa da kullanımı bununla sınırlı değildir.
   </simpara>
   <simpara>
    Anonim işlevler
    <link linkend="class.closure"><classname>Closure</classname></link>
    sınıfı kullanılarak gerçeklenir.
   </simpara>

    <example>
     <title>- Anonim işlev örneği</title>
     <programlisting role="php">
<![CDATA[
<?php
echo preg_replace_callback('~-([a-z])~',
      function ($match) {
       return strtoupper($match[1]);
      },
      'hello-world');
// Çıktısı: helloWorld
?>
]]>
     </programlisting>
    </example>
   <para>
    Anonim işlevler birer değişken değeri olarak da bildirilebilir. Bu
    durumda PHP, işlevi otomatik olarak  sınıfının nesnel bir örneği
    haline getirir. Bir anonim işlev, bir değişkene sıradan bir deyim gibi,
    bir noktalı virgül ile biten bir işlev olarak atanabilir:
   </para>
    <example>
     <title>- Değişkene anonim işlev atama örneği</title>
     <programlisting role="php">
<![CDATA[
<?php
$greet = function($isim)
{
    printf("Merhaba %s\r\n", $isim);
};

$greet('Dünya');
$greet('PHP');
?>
]]>
     </programlisting>
    </example>
   <simpara>
    Anonim işlevler değişkenleri üst etki alanından miras alabilirler. Böyle
    değişkenler <literal>use</literal> dil oluşumuna aktarılmalıdır.
    PHP 7.1 itibariyle, bu değişkenler &link.superglobals;,
    <varname>$this</varname> veya bir değiştirge ile aynı isimdeki değişkenleri
    içeremez.
   </simpara>

   <example>
    <title>Değikenleri üst etki alanından miras almak</title>
    <programlisting role="php">
<![CDATA[
<?php
$message = 'hello';

// "use" olmaksızın
$example = function () {
    var_dump($message);
};
$example();

// $message miras alınır
$example = function () use ($message) {
    var_dump($message);
};
$example();

// Miras alınan değişkenin değeri işlevin tanımından gelir, çağrısından değil.
$message = 'world';
$example();

// message sıfırlanır
$message = 'hello';

// Gönderimle miras alma
$example = function () use (&$message) {
    var_dump($message);
};
$example();

// Üst etki alanında değişen değer
// işlev çağrısı içinde yansıtılır.
$message = 'world';
$example();

// Anonim işlevler sıradan değiştirgeleri de kabul edebilir
$example = function ($arg) use ($message) {
    var_dump($arg . ' ' . $message);
};
$example("hello");
?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
Notice: Undefined variable: message in /example.php on line 6
NULL
string(5) "hello"
string(5) "hello"
string(5) "hello"
string(5) "world"
string(11) "hello world"
]]>
    </screen>
   </example>

   <para>
    Etki alanından miras alınan değişkenler listesinin sonunda bir virgül varsa
    PHP 8.0.0 itibariyle bu virgül yoksayılmaktadır.
   </para>
   <simpara>
    Üst etki alanından
    miras alınan değişkenler küresel değişkenler gibi ele alınmazlar.
    Küresel değişkenler, işlevin çalıştığı etki alanında tanımlı
    değişkenlerdir. Anonim işlevin üst etki alanı ise içinde bildirildiği
    işlevin etki alanıdır (Anonim işlevin bildirildiği etki alanı ile
    çağrıldığı etki alanı aynı olmak zorunda değildir). Aşağıdaki örneğe
    bakalım:
   </simpara>
    <example>
     <title>- Anonim işlevler ve etki alanı</title>
     <programlisting role="php">
<![CDATA[
<?php
// Ürünleri eklemek üzere bir Sepet oluşturalım.
// Eklenen ürünlerin toplam fiyatını döndürmek
// üzere bir geriçağırım işlevi kullanalım.
class Sepet
{
  const PRICE_BUTTER = 1.00;
  const PRICE_MILK = 3.00;
  const PRICE_EGGS = 6.95;

  protected $ürünler = Array();


  public static function ekle($ürün, $miktar)
  {
    $this->ürünler[$ürün] = $miktar;
  }

 public static function miktarıGetir($ürün)
 {
    return isset($this->ürünler[$ürün]) ? $this->ürünler[$ürün] : FALSE;

  }

  public function Toplam($kdv)
  {
      $toplam = 0.00;

      $işlev =
          function ($miktar, $ürün) use ($kdv, &$toplam)
          {
              $birimFiyat = constant(__CLASS__ . "::FiYAT_" .
                  strtoupper($ürün));
              $toplam += ($birimFiyat * $miktar) * ($kdv + 1.0);
          };

      array_walk($this->ürünler, $işlev);
      return round($toplam, 2);
  }
}

$sepetim = new Sepet;

// Sepete birşeyler ekleyelim
$sepetim->ekle('Peynir', 1);
$sepetim->ekle('Süt', 3);
$sepetim->ekle('Yumurta', 6);

// %5 KDV ile toplamı döndürelim
print $sepetim->Toplam(0.05) . "\n";
// sonuç: is 54.29
?>
]]>
     </programlisting>
   </example>

   <example>
    <title><literal>$this</literal>'in otomatik bağlanması</title>
    <programlisting role="php">
<![CDATA[
<?php

class Test
{
    public function testing()
    {
        return function() {
            var_dump($this);
        };
    }
}

$object = new Test;
$function = $object->testing();
$function();

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
object(Test)#1 (0) {
}
]]>
    </screen>
   </example>

   <para>
    Bir sınıf başka bir sınıfın içinde bildirildiğinde
    <literal>$this</literal>'i işlevin etki alanı içinde kullanılabilir
    kılarak otomatik olarak ona bağlanır. Bu otomatik bağlantı
    istenmiyorsa bunun yerine
    <link linkend="functions.anonymous-functions.static">statik
    anonim işlevler</link> kullanılabilir.
   </para>

   <sect2 xml:id="functions.anonymous-functions.static">
    <title>Statik anonim işlevler</title>
    <para>
     Anonim işlevler statik olarak bildirilebilmektedir.
     Böylece, geçerli sınıfın otomatik olarak bunlara bağlanamaması
     sağlanabilir. Çalışma anında nesneler de otomatik olarak bunlara
     bağlanamayacaktır.
    </para>
    <para>
     <example>
      <title>- Statik anonim bir işlevin içinde <literal>$this</literal>
        kullanmaya çalışmak</title>
      <programlisting role="php">
<![CDATA[
<?php

class Foo
{
    function __construct()
    {
        $func = static function() {
            var_dump($this);
        };
        $func();
    }
};
new Foo();

?>
]]>
      </programlisting>
      &example.outputs;
      <screen>
<![CDATA[
Notice: Undefined variable: this in %s on line %d
NULL
]]>
      </screen>
     </example>
    </para>

    <para>
     <example>
      <title>- Statik anonim bir işleve bir nesne bağlamaya çalışmak</title>
      <programlisting role="php">
<![CDATA[
<?php

$func = static function() {
    // işlev gövdesi
};

$func = $func->bindTo(new StdClass);
$func();

?>
]]>
      </programlisting>
      &example.outputs;
      <screen>
<![CDATA[
Warning: Cannot bind an instance to a static closure in %s on line %d
]]>
      </screen>
     </example>
    </para>
   </sect2>

   <sect2 role="changelog">
    &reftitle.changelog;
    <para>
     <informaltable>
      <tgroup cols="2">
       <thead>
        <row>
         <entry>&Version;</entry>
         <entry>&Description;</entry>
        </row>
       </thead>
       <tbody>
        <row>
         <entry>7.1.0</entry>
         <entry>
          Anonim işlev değişkenleri &link.superglobals;,
          <varname>$this</varname> veya bir değiştirge ile aynı isimdeki
          değişkenleri içeremez.
         </entry>
        </row>
       </tbody>
      </tgroup>
     </informaltable>
    </para>
   </sect2>

   <sect2 role="notes">
    &reftitle.notes;
    <note>
     <simpara>
      <function>func_num_args</function>, <function>func_get_args</function>
      ve <function>func_get_args</function> işlevini bir anonim işlev
      içinde kullanmak mümkündür.
     </simpara>
    </note>
   </sect2>
  </sect1>

  <sect1 xml:id="functions.arrow">
   <title>Ok İşlevleri</title>

   <simpara>
    Ok işlevleri PHP 7.4'te <link linkend="functions.anonymous">anonim
    işlevler</link> için daha kısa bir sözdizimi olarak tanıtılmıştır.
   </simpara>
   <simpara>
    Anonim işlevler ve ok işlevlerinin ikisi de
    <link linkend="class.closure"><classname>Closure</classname></link>
    sınıfı kullanılarak gerçeklenmiştir.
   </simpara>

   <simpara>
    Ok işlevlerinin temel biçimi:
    <code>fn (değiştirgeler) =&gt; ifade</code>
   </simpara>

   <simpara>
    Ok işlevleri, üst etki alanındaki değişkenleri daima otomatik
    kullanması dışında <link linkend="functions.anonymous">anonim
    işlevler</link>in desteklediği özelliklerin tümünü destekler.
   </simpara>

   <simpara>
    İfadede kullanılan bir değişken üst etki alanında tanımlandığında,
    örtük olarak değeriyle aktarılır. Aşağıdaki örnekte
    <varname>$fn1</varname> ve <varname>$fn2</varname> işlevleri aynı
    şekilde davranır.
   </simpara>

   <para>
    <example>
     <title>- Ok işlevleri otomatik olarak değişkenleri üst etki alanından
    daima değerleriyle alır</title>
     <programlisting role="php">
<![CDATA[
<?php

$y = 1;

$fn1 = fn($x) => $x + $y;
// $y değiştirgesini değeriyle kullanmaya eşdeğerdir:
$fn2 = function ($x) use ($y) {
    return $x + $y;
};

var_export($fn1(3));
?>
]]>
     </programlisting>
     &example.outputs;
     <screen>
<![CDATA[
4
]]>
      </screen>
    </example>
   </para>
   <simpara>
    Aşağıdaki örnek, ok işlevleri iç içe kullanılsa da çalışır:
   </simpara>
   <para>
    <example>
     <title>- Ok işlevleri otomatik olarak değişkenleri iç içe olsalar bile
       üst etki alanından daima değerleriyle alır</title>
     <programlisting role="php">
<![CDATA[
<?php

$z = 1;
$fn = fn($x) => fn($y) => $x * $y + $z;
// 51 çıktılanır
var_export($fn(5)(10));
?>
]]>
     </programlisting>
    </example>
   </para>
   <simpara>
    Anonim işlevlere benzer olarak, ok işlevleri sözdizimi de, değiştirge ve
    dönüş türleri dahil, öntanımlı değerler, değişken sayıda değiştirgeler,
    gönderimli aktarım ve dönüşler gibi rasgele işlev imzalarına da izin
    verir. Aşağıdaki ok işlevlerinin tamamı geçerli örneklerdir:
   </simpara>
   <para>
    <example>
     <title>- Ok işlevi örnekleri</title>
     <programlisting role="php">
<![CDATA[
<?php

fn(array $x) => $x;
static fn(): int => $x;
fn($x = 42) => $x;
fn(&$x) => $x;
fn&($x) => $x;
fn($x, ...$rest) => $rest;

?>
]]>
     </programlisting>
    </example>
   </para>
   <simpara>
    Ok işlevleri değişken bağlamını değeriyle kullanır. Bu kabaca, ok işlevi
    içinde kullanılan her <varname>$x</varname> değişkeni için bir
    <code>use($x)</code> çalıştırmaya eşdeğerdir.
    Değişken bağlamını değeriyle kullanmaktan kasıt, dış etki alanındaki
    herhangi bir değerin değiştirilmesinin mümkün olmayacağıdır.
    Değişken bağlamını gönderimiyle kullanmak için
    <link linkend="functions.anonymous">anonim işlevler</link> kullanılabilir.
   </simpara>
   <para>
    <example>
     <title>- Dış etki alanındaki değerler ok işlevleri kullanılarak değiştirilemez</title>
     <programlisting role="php">
<![CDATA[
<?php

$x = 1;
$fn = fn() => $x++; // Etkisiz
$fn();
var_export($x);  // 1 çıktılanır

?>
]]>
     </programlisting>
    </example>
   </para>

   <sect2 role="changelog">
    &reftitle.changelog;
    <para>
     <informaltable>
      <tgroup cols="2">
       <thead>
        <row>
         <entry>&Version;</entry>
         <entry>&Description;</entry>
        </row>
       </thead>
       <tbody>
        <row>
         <entry>7.4.0</entry>
         <entry>
          Ok işlevleri kullanılabilir oldu.
         </entry>
        </row>
       </tbody>
      </tgroup>
     </informaltable>
    </para>
   </sect2>

   <sect2 role="notes">
    &reftitle.notes;
    <note>
     <simpara>
      Bir ok işlevi içinden <function>func_num_args</function>,
      <function>func_get_arg</function> ve <function>func_get_args</function>
      kullanmak mümkündür.
     </simpara>
    </note>
   </sect2>
  </sect1>

</chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
