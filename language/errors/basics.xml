<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 17624e47b98a93ec156a0c2a51ce7b9fd3116abe Maintainer: erdemkeren Status: ready -->
<sect1 xml:id="language.errors.basics" xmlns="http://docbook.org/ns/docbook">
 <title>Temeller</title>

 <para>
  PHP, hataları bir takım iç hata koşuluna karşılık olarak raporlar.
  Bu hatalar, farklı koşullarda bir işaretçi olarak kullanılabilir ve
  ihtiyaca göre gösterilip / günlüklenebilir.
 </para>

 <para>
  PHP tarafından oluşturulan her hata bir türe sahiptir.
  <link linkend="errorfunc.constants">Bu hata türlerinin bir listesi</link>,
  hangi durumlarda karşılaşılacağı ve davranışın kısa bir
  açıklaması ile birlikte mevcuttur.
 </para>

 <sect2 xml:id="language.errors.basics.handling">
  <title>PHP ile hata işlemek</title>

  <para>
   Eğer hiçbir hata işleyici belirlenmemişse, PHP hataları yapılandırmasına
   bağlı olarak işleyecektir. Hangi hataların raporlandığı ve hangilerinin
   gözardı edildiği <link
   linkend="ini.error-reporting"><parameter>error_reporting</parameter></link>
   adlı php.ini yönergesi ile kontrol edilir ya da işleyiş sürecinde
   <function>error_reporting</function> işlevi çağırılır. Bununla birlikte,
   bazı hatalar betiğiniz çalıştırılmaya başlanmadan meydana gelebildiğinden,
   yapılandırma yönergelerinin ayarlanması şiddetle tavsiye edilir.
  </para>

  <para>
   Bir geliştirme ortamında, PHP tarafından üretilen sorunları fark etmeniz ve
   çözmeniz gerektiğinden, <link
   linkend="ini.error-reporting"><parameter>error_reporting</parameter></link>
   yönergesini daima <constant>E_ALL</constant> olarak yapılandırmalısınız.
   Üretimde ise, <code>E_ALL &amp; ~E_NOTICE &amp; ~E_STRICT
   &amp; ~E_DEPRECATED</code> gibi daha az ayrıntılı bir seviyeye ayarlamak
   isteyebilirsiniz. Ancak bir çok durumda olası sorunlar hakkında erken uyarı
   sağlayabileceği için <constant>E_ALL</constant> da uygundur.
  </para>

  <para>
   PHP&apos;nin bu hatalarla ne yapacağı az sonra değineceğimiz iki php.ini
   yönergesine bağlıdır. <link
   linkend="ini.display-errors"><parameter>display_errors</parameter></link>
   hatanın betik çıktısının bir parçası olarak gösterilip gösterilmeyeceğini
   denetler.  Hata veritabanı parolaları gibi hassas bilgiler
   içerebileceğinden, üretim ortamında bu ayar her zaman etkisiz kılınmış
   olmalıdır. Ancak geliştirme ortamında, hataların anında raporlandığından
   emin olabilmek için etkin hale getirmek çoğu zaman kullanışlı olacaktır.
  </para>

  <para>
   Hataların gösterilmesine ek olarak, PHP
   <link linkend="ini.log-errors"><parameter>log_errors</parameter></link>
   yönergesi etkinleştirildiğinde hataları günlükleyebilir. Bu tüm hataları
   <link linkend="ini.error-log"><parameter>error_log</parameter></link> ile
   belirlenen bir dosyaya ya da sistem raporlama aracına günlükleyecektir.
   Hataları günlükleyebildiğiniz ve daha sonra bu hataları temel alarak
   raporlama yapabileceğiniz için bu yönerge üretim ortamlarında ziyadesiyle
   kullanışlı olabilir.
  </para>
 </sect2>

 <sect2 xml:id="language.errors.basics.user">
  <title>Kullanıcı hata işleyiciler</title>

  <para>
   Eğer PHP&apos;nin öntanımlı hata işleyicileri yetersizse,
   bir çok hata türünü kendi hata işleyicilerinizle
   <function>set_error_handler</function> yönergesini
   kurarak işleyebilirsiniz. Bazı hata türleri bu şekilde işlenemese de,
   işlenebilen hatalar betiğinizin uygun gördüğü şekilde işlenebilecektir.
   Örneğin, bu özelleştirilmiş bir hata sayfasının kullanıcıya gösterilmesi
   ve daha sonra ayrıntılı bilginin e-posta aracılığı ile günlüklenmesi
   olabilir.
  </para>
 </sect2>
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

