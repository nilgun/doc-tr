<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: a9edd62d087ab1eb6292c795b7256e14ff9f1234 Maintainer: nilgun Status: ready -->
<!-- CREDITS: tpug, sezer -->
 <sect1 xml:id="language.oop5.autoload" xmlns="http://docbook.org/ns/docbook">
  <title>Otomatik Yüklenen Sınıflar</title>
  <para>
    Nesne-yönelimli uygulama yazan birçok geliştirici, her bir sınıf tanımı
    için ayrı bir PHP kaynak dosyası oluşturmaktadır. Bu kullanımın en can
    sıkıcı noktalarından bir tanesi, betiklerin en tepesinde bir sürü dosyanın
    betiğe dahil edilmesini gerektirmesidir (her bir sınıf için ayrı bir
    dosya).
  </para>
  <para>
    <function>spl_autoload_register</function> işlevi, henüz tanımlanmamışlarsa,
    sınıfların ve arayüzlerin otomatik olarak yüklenmesini sağlayacak
    sayıda otomatik yükleyiciyi kaydeder. Otomatik yükleyicileri
    kaydederek, bir hatayla başarısızlığa uğramadan önce PHP'ye sınıf veya
    arayüzü yüklemek için son bir şans verilir.
  </para>
  <tip>
   <para>
    <function>__autoload</function> işlevi sınıf ve arayüzlerin otomatik
    yüklenmesini sağlasa da <function>spl_autoload_register</function> işlevini
    kullanımı tercih edilmelidir. Bunun sebebi daha esnek olmasıdır (üçüncü
    parti kütüphanelerde olduğu gibi uygulamada belirtilebilecek sayıda
    otomatik yükleyiciyi etkinleştirerek). Bu nedenle
    <function>__autoload</function> işlevinin kullanılmaması daha iyi olur;
    zaten, PHP 7.2.0 ve sonrası için kullanımdan kaldırılmıştır.
   </para>
  </tip>
  <note>
   <para>
    PHP CLI'yi <link linkend="features.commandline">etkileşimli kipte</link>
    kullanıyorsanız otomatik yükleme kullanılamayacaktır.
   </para>
  </note>
  <note>
   <para>
    Sınıf ismini <function>call_user_func</function> gibi bir işlevde
    kullanırsanız <literal>../</literal> gibi bazı tehlikeli karakterler
    içerebilir. Böyle işlevlerde
    kullanıcı girdilerini kullanmamanız ya da en azından girdiyi
    <function>__autoload</function> ile doğrulamanızı öneririz.
   </para>
  </note>
  <para>
   <example>
    <title>- Otomatik yükleme örneği</title>
    <para>
      Bu örnek <literal>MyClass1</literal> ve <literal>MyClass2</literal>
      sınıflarını yüklemeye çalışmaktadır. Sınıflar aynı isimli
      <filename>MyClass1.php</filename> ve <filename>MyClass2.php</filename>
      dosyalarının içinde yer almaktadırlar.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
spl_autoload_register(function ($class_name) {
    include $class_name . '.php';
});


$obj  = new MyClass1();
$obj2 = new MyClass2();
?>
]]>
    </programlisting>
   </example>
   <example>
    <title>- Başka bir otomatik yükleme örneği</title>
    <para>
     Bu örnek <literal>DenemeA</literal> arayüzünü yüklemeye çalışır.
    </para>
    <programlisting role="php">
<![CDATA[
<?php

spl_autoload_register(function ($name) {
    var_dump($isim);
});

class Fan implements DenemeA {
}

/*
string(5) "DenemeA"

Fatal error: Interface 'DenemeA' not found in ...
*/
?>
]]>
    </programlisting>
   </example>
   <example>
    <title>- İstisnalı otomatik yükleme</title>
    <para>
     Bu örnekte bir istisna yakalanmakta ve <literal>try/catch</literal>
     kullanımı gösterilmektedir.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
spl_autoload_register(function ($name) {
    echo "$name yüklenmek isteniyor.\n";
    throw new Exception("$name yüklenemedi.");
});

try {
    $obj = new YüklenemezSınıf();
} catch (Exception $e) {
    echo $e->getMessage(), "\n";
}
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
YüklenemezSınıf yüklenmek isteniyor.
YüklenemezSınıf yüklenemedi.
]]>
    </screen>
   </example>
   <example>
    <title>- İstisnalı otomatik yükleme - Eksik özel istisna</title>
    <para>
     Bu örnek, yüklenemeyen, özel bir istisna için bir istisna yavrular.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
spl_autoload_register(function ($name) {
    echo "$name yüklenmek isteniyor.\n";
    throw new Eksikİstisna("$name yüklenemedi.");
});

try {
    $obj = new YülenemezSınıf();
} catch (Exception $e) {
    echo $e->getMessage(), "\n";
}
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
YülenemezSınıf yüklenmek isteniyor.
Eksikİstisna yüklenmek isteniyor.

Fatal error: Class 'Eksikİstisna' not found in testMissingException.php on line 4
]]>
    </screen>
    </example>
  </para>

  <simplesect role="seealso">
   &reftitle.seealso;
   <para>
    <simplelist>
     <member><function>unserialize</function></member>
     <member><link linkend="ini.unserialize-callback-func">
         unserialize_callback_func</link></member>
     <member><function>spl_autoload_register</function></member>

     <member><function>spl_autoload</function></member>
     <member><function>__autoload</function></member>
    </simplelist>
   </para>
  </simplesect>

 </sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
