<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: a9edd62d087ab1eb6292c795b7256e14ff9f1234 Maintainer: nilgun Status: ready -->
<!-- CREDITS: tpug, sezer -->
 <sect1 xml:id="language.oop5.visibility" xmlns="http://docbook.org/ns/docbook">
  <title>Görünürlük</title>
  <para>
    Bir özelliğin ya da bir yöntemin (PHP 7.1.0 ve sonrası) görünürlüğü,
    bildirim sırasında önüne şu anahtar sözcüklerden biri getirilerek
    belirlenebilir:
    <code>public</code>, <code>protected</code> ya da <code>private</code>.
    <command>public</command> olarak bildirilmiş özelliklere ve yöntemlere her
    yerden erişilebilir. <command>protected</command> bildirimli özelliklere ve
    yöntemlere sadece tanımlandığı sınıfdan, ebeveyn sınıflardan ve miras alınarak
    <command>private</command> bildirimli özelliklere ve yöntemlere ise sadece
    özelliğin tanımlandığı sınıfın içinden erişilebilir.
  </para>
  <sect2 xml:id="language.oop5.visiblity-members">
   <title>Özelliklerin Görünürlüğü</title>
   <para>
    Sınıf özellikleri <code>public</code>, <code>protected</code> ya da
    <code>private</code> olarak tanımlanmalıdır. Bir özellik sadece
    <code>var</code> kullanarak bildirilmişse
    <code>public</code> olarak bildirilmiş gibi ele alınır.
   </para>
   <para>
    <example>
     <title>- Özellik bildirimi</title>
     <programlisting role="php">
<![CDATA[
<?php
/**
 * Sınıfım tanımı
 */
class Sınıfım
{
    public $genel = 'Genel';
    protected $korumalı = 'Korumalı';
    private $özel = 'Özel';

    function selamVer()
    {
        echo $this->genel;
        echo $this->korumalı;
        echo $this->özel;
    }
}

$nesne = new Sınıfım();
echo $nesne->genel;    // Çalışır
echo $nesne->korumalı; // Ölümcül Hata
echo $nesne->özel;     // Ölümcül Hata
$nesne->selamVer();    // Genel, Korumalı ve Özel görüntüler


/**
 * ÖbürSınıfım tanımı
 */
class ÖbürSınıfım extends Sınıfım
{
    // public ve protected özellikleri yeniden tanımlayabiliriz,
    // ancak private olanlar tanımlanamaz
    public $genel = 'Genel2';
    protected $korumalı = 'Öbür korumalı';

    function selamVer()
    {
        echo $this->genel;
        echo $this->korumalı;
        echo $this->özel;
    }
}

$nesne2 = new ÖbürSınıfım();
echo $nesne2->genel;    // Çalışır
echo $nesne2->korumalı; // Ölümcül Hata
echo $nesne2->özel;     // Tanımsız

$nesne2->selamVer();    // Genel2, Öbür korumalı ve Undefined görüntülenir

?>
]]>
     </programlisting>
    </example>
   </para>
  </sect2>

  <sect2 xml:id="language.oop5.visiblity-methods">
   <title>Yöntem Görünürlüğü</title>
   <para>
    Sınıf yöntemleri <code>public</code>, <code>protected</code> ya da
    <code>private</code> olarak tanımlanmalıdır. Bunlardan herhangi biri
    kullanılmadan yapılmış yöntem tanımlarının <code>public</code>
    kullanılarak tanımlandığı varsayılır.
   </para>
   <para>
    <example>
     <title>- Yöntem bildirimi</title>
     <programlisting role="php">
<![CDATA[
<?php
/**
 * Sınıfım tanımı
 */
class Sınıfım
{
    // public kurucu bildirimi
    public function __construct() { }

    // public yöntem bildirimi
    public function Genel() { }

    // protected yöntem bildirimi
    protected function Korumalı() { }

    // private yöntem bildirimi
    private function Özel() { }

    // Bu da public bir yöntem
    function Falanca()
    {
        $this->Genel();
        $this->Korumalı();
        $this->Özel();
    }
}

$sınıfım = new Sınıfım;
$sınıfım->Genel();    // Çalışır
$sınıfım->Korumalı(); // Ölümcül Hata
$sınıfım->Özel();     // Ölümcül Hata
$sınıfım->Falanca();  // Public, Protected ve Private çalisir


/**
 * ÖbürSınıfım tanımı
 */
class ÖbürSınıfım extends Sınıfım
{
    // Bu public bir yöntemdir
    function Filanca()
    {
        $this->Genel();
        $this->Korumalı();
        $this->Özel();  // Ölümcül Hata
    }
}

$öbürSınıfım = new Sınıfım;
$öbürSınıfım->Genel();   // Çalışır
$öbürSınıfım->Filanca(); // Genel ve Korumalı çalışır, Özel çalışmaz

class Bar
{
    public function dnm() {
        $this->dnmÖzel();
        $this->dnmGenel();
    }

    public function dnmGenel() {
        echo "Bar::dnmGenel\n";
    }

    private function dnmÖzel() {
        echo "Bar::dnmÖzel\n";
    }
}

class Foo extends Bar
{
    public function dnmGenel() {
        echo "Foo::dnmGenel\n";
    }

    private function dnmÖzel() {
        echo "Foo::dnmÖzel\n";
    }
}

$fo = new Foo();
$fo->dnm();  // Bar::dnmÖzel
             // Foo::dnmGenel

?>
]]>
     </programlisting>
    </example>
   </para>
  </sect2>

  <sect2 xml:id="language.oop5.visiblity-constants">
   <title>Sabit Görünürlüğü</title>
   <para>
    PHP 7.1.0 ve sonrasında, sınıf sabitleri public, private veya
    protected olarak tanımlanabilir. Bu sözcükler olmaksızın tanımlanmış
    sabitlerin public olarak tanımlandıkları varsayılır.
   </para>
   <para>
    <example>
     <title>- PHP 7.1.0 ve sonrasında sabit bildirimleri</title>
     <programlisting role="php">
<![CDATA[
<?php
/**
 * Tanımla: MyClass
 */
class MyClass
{
    // public sabit bildirimi
    public const MY_PUBLIC = 'genel';

    // protected  sabit bildirimi
    protected const MY_PROTECTED = 'korumalı';

    // private  sabit bildirimi
    private const MY_PRIVATE = 'özel';

    public function foo()
    {
        echo self::MY_PUBLIC;
        echo self::MY_PROTECTED;
        echo self::MY_PRIVATE;
    }
}

$myclass = new MyClass();
MyClass::MY_PUBLIC; // Çalışır
MyClass::MY_PROTECTED; // Ölümcül hata
MyClass::MY_PRIVATE; // Ölümcül hata
$myclass->foo(); // genel, korumalı ve özel çalışır


/**
 * Tanımla: MyClass2
 */
class MyClass2 extends MyClass
{
    // public
    function foo2()
    {
        echo self::MY_PUBLIC;
        echo self::MY_PROTECTED;
        echo self::MY_PRIVATE; // Ölümcül hata
    }
}

$myclass2 = new MyClass2;
echo MyClass2::MY_PUBLIC; // Çalışır
$myclass2->foo2(); // genel ve korumalı çalışır, özel çalışmaz
?>
]]>
     </programlisting>
    </example>
   </para>
  </sect2>

  <sect2 xml:id="language.oop5.visibility-other-objects">
   <title>Diğer nesnelerden görünürlük</title>
   <para>
    Aynı türdeki nesneler, aynı örnekler olmasalar bile, diğerlerinin özel ve
    korunan üyelerine erişime sahip olacaktır. Bunun sebebi, gerçeklenime özgü
    ayrıntıların bu nesnelerin içindeyken zaten biliniyor olmasıdır.
   </para>
   <example>
    <title>- Aynı nesne türündeki özel üyelere erişim</title>
    <programlisting role="php">
<![CDATA[
<?php
class Test
{
    private $foo;

    public function __construct($foo)
    {
        $this->foo = $foo;
    }

    private function bar()
    {
        echo 'Private yönteme erişildi.';
    }

    public function baz(Test $other)
    {
        // private özelliği değiştirebiliriz:
        $other->foo = 'hello';
        var_dump($other->foo);

        // private yöntemi de çağırabiliriz:
        $other->bar();
    }
}

$test = new Test('test');

$test->baz(new Test('other'));
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
string(5) "hello"
Private yönteme erişildi.
]]>
    </screen>
   </example>
  </sect2>

  </sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
