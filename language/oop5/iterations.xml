<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: a9edd62d087ab1eb6292c795b7256e14ff9f1234 Maintainer: nilgun Status: ready -->
<!-- CREDITS: tpug, sezer -->
 <sect1 xml:id="language.oop5.iterations" xmlns="http://docbook.org/ns/docbook">
  <title>Nesne Yineleme</title>
  <para>
    Tanımlanan nesneler, &foreach; gibi bir deyim kullanılarak bir
    öğe listesi üzerinden yinelenebilirler. Öntanımlı olarak, tüm <link
    linkend="language.oop5.visibility">görünür</link> özellikler yineleme
    için kullanılacaktır.
  </para>

  <example>
   <title>- Basit Nesne Yineleme</title>
   <programlisting role="php">
<![CDATA[
<?php
class MyClass
{
    public $var1 = 'değer 1';
    public $var2 = 'değer 2';
    public $var3 = 'değer 3';

    protected $protected = 'protected var';
    private   $private   = 'private var';

    function iterateVisible() {
       echo "MyClass::iterateVisible:\n";
       foreach ($this as $key => $value) {
           print "$key => $value\n";
       }
    }
}

$class = new MyClass();

foreach($class as $key => $value) {
    print "$key => $value\n";
}
echo "\n";


$class->iterateVisible();

?>
]]>
   </programlisting>
   &example.outputs;
   <screen role="php">
<![CDATA[
var1 => değer 1
var2 => değer 2
var3 => değer 3

MyClass::iterateVisible:
var1 => değer 1
var2 => değer 2
var3 => değer 3
protected => protected var
private => private var
]]>
   </screen>

  </example>

 <para>
  Çıktıdan görüleceği gibi, &foreach; erişilebilir olan tüm <link
  linkend="language.oop5.visibility">görünür</link> özellikleri yineledi.
 </para>
 <para>
  Bir adım öteye giderek, <varname>Iterator</varname> <link
  linkend="language.oop5.interfaces">arayüzü</link> gerçeklenebilir.
  <varname>Iterator</varname> kullanılarak, hangi nesnenin nasıl
  yineleneceğine ve her yinelemede hangi değerlerin kullanılacağına bir
  nesnenin karar verebilmesi mümkündür.
 </para>

  <example>
   <title>- Iterator kullanılarak Nesne Yineleme</title>
   <programlisting role="php">
<![CDATA[
<?php
class MyIterator implements Iterator
{
    private $var = array();

    public function __construct($array)
    {
        if (is_array($array)) {
            $this->var = $array;
        }
    }

    public function rewind()
    {
        echo "başa al\n";
        reset($this->var);
    }

    public function current()
    {
        $var = current($this->var);
        echo "mevcut: $var\n";
        return $var;
    }

    public function key()
    {
        $var = key($this->var);
        echo "anahtar: $var\n";
        return $var;
    }

    public function next()
    {
        $var = next($this->var);
        echo "sonraki: $var\n";
        return $var;
    }

    public function valid()
    {
        $key = key($this->var);
        $var = ($key !== NULL && $key !== FALSE);
        echo "geçerli: {$var}\n";
        return $var;
    }
}

$values = array(1,2,3);
$it = new MyIterator($values);

foreach ($it as $a => $b) {
    print "$a: $b\n";
}
?>
]]>
   </programlisting>
   &example.outputs;
   <screen role="php">
<![CDATA[
başa al
geçerli: 1
mevcut: 1
anahtar: 0
0: 1
sonraki: 2
geçerli: 1
mevcut: 2
anahtar: 1
1: 2
sonraki: 3
geçerli: 1
mevcut: 3
anahtar: 2
2: 3
sonraki:
geçerli:
]]>
   </screen>

  </example>

  <para>
   <interfacename>IteratorAggregate</interfacename>
   <link linkend="language.oop5.interfaces">arayüzü</link>,
   <interfacename>Iterator</interfacename> yöntemlerinin tümünü gerçeklemek
   için de kullanılabilir. <interfacename>IteratorAggregate</interfacename>
   sadece <interfacename>Iterator</interfacename> arayüzünü gerçekleyen
   sınıfın bir örneğini döndüren
   <methodname>IteratorAggregate::getIterator</methodname> yönteminin
   gerçeklenmesini gerektirir.
  </para>

  <example>
   <title>- IteratorAggregate ile Nesne Yineleme</title>
   <programlisting role="php">
<![CDATA[
<?php
class MyCollection implements IteratorAggregate
{
    private $items = array();
    private $count = 0;

    // IteratorAggregate için gerekli arayüz tanımı
    public function getIterator() {
        return new MyIterator($this->items);
    }

    public function add($value) {
        $this->items[$this->count++] = $value;
    }
}

$coll = new MyCollection();
$coll->add('değer 1');
$coll->add('değer 2');
$coll->add('değer 3');

foreach ($coll as $key => $val) {
    echo "key/value: [$key -> $val]\n\n";
}
?>
]]>
   </programlisting>
   &example.outputs;
   <screen role="php">
<![CDATA[
başa al
mevcut: değer 1
geçerli: 1
mevcut: değer 1
anahtar: 0
anahtar/değer: [0 -> değer 1]

sonraki: değer 2
mevcut: değer 2
geçerli: 1
mevcut: değer 2
anahtar: 1
anahtar/değer: [1 -> değer 2]

sonraki: değer 3
mevcut: değer 3
geçerli: 1
mevcut: değer 3
anahtar: 2
anahtar/değer: [2 -> değer 3]

sonraki:
mevcut:
geçerli:
]]>
   </screen>

  </example>

  <note>
   <para>
    Yineleyiciler ile ilgili daha fazla örnek için, <xref
    linkend="spl.iterators"/> bölümüne bakınız.
   </para>
  </note>
  <note>
   <para>
    Yineleyicileri tanımlamanın başka bir yolu
    <link linkend="language.generators">üreteçleri</link> kullanmaktır.
   </para>
  </note>

 </sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
