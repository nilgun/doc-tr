<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: a9edd62d087ab1eb6292c795b7256e14ff9f1234 Maintainer: nilgun Status: ready -->
<!-- CREDITS: tpug, sezer -->
<sect1 xml:id="language.oop5.paamayim-nekudotayim" xmlns="http://docbook.org/ns/docbook">
 <title>Etki Alanı Çözünürlük İşleci (::)</title>

 <para>
  Etki Alanı Çözünürlük İşleci (Paamayim Nekudotayim de denirmiş), basitçe
  bir çift iki nokta iminden ibaret olup (biz "iki nokta çifti"
  diyebiliriz), bir sınıfın <link linkend="language.oop5.static"
  >statik</link>, <link linkend="language.oop5.constants">sabit</link> ve
  geçersiz kılınmış özellik ve yöntemlerine erişilebilmesini sağlayan bir
  simgedir.
 </para>

 <para>
  Bu öğelere sınıf tanımının dışından erişirken bu işlecin solunda sınıfın
  ismini kullanın.
 </para>

 <para>
  Bu işlecin solunda sınıf ismi yerine bir değişken
  kullanmak da mümkündür. Değişken ismi, (<literal>self</literal>,
  <literal>parent</literal>, <literal>static</literal> gibi) bir anahtar
  sözcük olmamalıdır.
 </para>

 <para>
  <quote>Paamayim Nekudotayim</quote> ilk bakışta iki nokta üst üste için
  garip bir adlandırma gibi gözükebilir. Ancak, Zend Engine 0.5 (php 3'ün
  kalbidir) yazıldığı esnada Zend ekibinin kullanmak istediği terim bu
  oldu. Esasında bu iki sözcük de iki nokta çifti anlamına gelmektedir -
  İbranice'de!
 </para>

 <example>
  <title>- Sınıf tanımı dışında ::</title>
  <programlisting role="php">
<![CDATA[
<?php
class Sınıfım {
    const SABİT_DEĞER = 'Bir sabit değer';
}

echo Sınıfım::SABİT_DEĞER;
?>
]]>
  </programlisting>
 </example>

 <para>
  Bir sınıfın özellik ve yöntemlerine bu işleç sayesinde sınıfın içinden
  erişilmek istendiğinde işlecin solunda <varname>self</varname>,
  <varname>parent</varname> veya <varname>static</varname> anahtar sözcüğü
  kullanılır.
 </para>

 <example>
  <title>- Sınıf tanımı içinde ::</title>
  <programlisting role="php">
<![CDATA[
<?php
class BaşkaSınıf extends Sınıfım
{
    public static $statik = 'Bir statik değişken';

    public static function ikiNoktaÇifti() {
        echo parent::SABİT_DEĞER . "\n";
        echo self::$statik . "\n";
    }
}

$sınıfadı = 'BaşkaSınıf';
$sınıfadı::ikiNoktaÇifti();

BaşkaSınıf::ikiNoktaÇifti();
?>
]]>
  </programlisting>
 </example>

 <para>
  Çocuk sınıf ebeveyninin yöntem tanımlarından birini geçersiz kıldığı
  takdirde PHP ebeveyne ait yöntemi çağıramayacaktır. Ebeveynin yönteminin
  çağrılıp çağrılmayacağı çocuk sınıfın inisiyatifindedir. Bu durum aynı
  zamanda <link linkend="language.oop5.decon">Kurucular ve
  Yıkıcılar</link>, <link linkend="language.oop5.overloading">Aşırı
  Yükleme</link> ve <link linkend="language.oop5.magic">Sihirli</link>
  yöntem tanımları için de geçerlidir.
 </para>

 <example>
  <title>- Ebeveynin yöntemini çağırmak</title>
  <programlisting role="php">
<![CDATA[
<?php
class Sınıfım
{
    protected function işlevim() {
        echo "Sınıfım::işlevim()\n";
    }
}

class BaşkaSınıf extends Sınıfım
{
    // Ebeveynin tanımını geçersiz kılalım
    public function işlevim()
    {
        // Ama hala ebeveynin işlevini çağırabiliriz
        parent::işlevim();
        echo "BaşkaSınıf::işlevim()\n";
    }
}

$class = new BaşkaSınıf();
$class->işlevim();
?>
]]>
  </programlisting>
 </example>
 <para>
  Ayrıca, <link linkend="language.oop5.basic.class.this">statik çağrı hilesi
  örnekleri</link>ne de bakınız.
 </para>

</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

