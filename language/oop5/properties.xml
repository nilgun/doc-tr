<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: a9edd62d087ab1eb6292c795b7256e14ff9f1234 Maintainer: nilgun Status: ready -->
 <sect1 xml:id="language.oop5.properties" xmlns="http://docbook.org/ns/docbook">
  <title>Özellikler</title>

  <para>
   Sınıf üyesi değişkenlere <emphasis>özellik</emphasis> denir. Bunlara
   bazan <emphasis>öznitelik</emphasis> veya <emphasis>alan</emphasis>
   dendiği de olur, fakat bu kılavuzun amaçları doğrultusunda
   biz <emphasis>özellik</emphasis> terimini kullanacağız. Bunlar normal
   değişken bildiriminin önüne <literal>public</literal>,
   <literal>protected</literal> veya <literal>private</literal> anahtar
   sözcüklerinden biri ve PHP 7.4 itibariyle ardından isteğe bağlı bir tür
   bildirimi getirilerek bildirilir. Bu bildirim, bir ilklendirme olarak da
   yapılabilir; bu durumda bir <link linkend="language.constants">sabit</link>
   değerle ilklendirme yapılmalıdır.
  </para>
  <para>
   <literal>public</literal>, <literal>protected</literal>,
   ve <literal>private</literal> sözcüklerinin anlamları için
   <xref linkend="language.oop5.visibility" /> belgesine bakınız.
  </para>
  <note>
   <para>
    Sınıf özelliklerini bildirmenin diğer bir yolu, önerilmemekle birlikte,
    PHP 4 ile geriye uyumluluğu sağlamak için, <literal>var</literal>
    sözcüğünü kullanmaktır. Böyle bir durumda özellik <literal>public</literal>
    bildirilmiş gibi ele alır.
   </para>
  </note>
  <para>
   Statik olmayan özelliklere, yöntemleri içinden <literal>-&gt;</literal>
   (Nesne İşleci): <varname>$this-&gt;özellik</varname> (burada
   <literal>özellik</literal> özelliğin ismidir) kullanarak erişilir. Statik
   özelliklere ise <literal>::</literal> (Çift İki nokta imi):
   <varname>self::özellik</varname> kullanarak erişilir. Statik ve statik
   olmayan özellikler arasıdaki fark hakkında daha  ayrıntılı bilgi için
   <xref linkend="language.oop5.static" /> bölümüne bakınız.
  </para>
  <para>
   Yöntem bir nesne bağlamından çağrılıyorsa  <varname>$this</varname> sözde
   değişkeni sınıf yöntemleri içinde de kullanılabilir.
   <varname>$this</varname>, yöntemi çağıran nesneye (yöntemin ait olduğu
   nesneye) bir gönderimdir. Fakat yöntem, bir ikincil nesne bağlamından <link
   linkend="language.oop5.static">statik olarak</link> çağrılıyorsa, bu,
   birincil nesne de olabilir.
  </para>

  <para>
   <example>
    <title>- Özellik bildirimi</title>
    <programlisting role="php">
<![CDATA[
<?php
class SimpleClass
{
   public $var1 = 'hello ' . 'world';

   public $var2 = <<<EOD
hello world
EOD;
   public $var3 = 1+2;

   // geçersiz özellik bildirimleri:
   public $var4 = self::myStaticMethod();
   public $var5 = $myVar;

   // geçerli özellik bildirimleri:
   public $var6 = myConstant;
   public $var7 = [true, false];

   public $var8 = <<<'EOD'
hello world
EOD;
}
?>
]]>
    </programlisting>
   </example>
  </para>

  <note>
   <para>
    Sınıflar ve nesnelerle çalışan bazı işlevler vardır. Bunlar için
    <xref linkend="ref.classobj" /> bölümüne bakınız.
   </para>
  </note>

  <sect2 xml:id="language.oop5.properties.typed-properties">
   <title>Tür Bildirimleri</title>
   <para>
    PHP 7.4.0 ve sonrasında özellik tanımı bir  <type>callable</type>
    istisnası ile <link linkend="language.types.declarations">tür
    bildirimi</link> içerebilmektedir.
    <example>
     <title>- Tür ile özellik bildirimi</title>
     <programlisting role="php">
<![CDATA[
<?php

class User
{
    public int $id;
    public ?string $name;

    public function __construct(int $id, ?string $name)
    {
        $this->id = $id;
        $this->name = $name;
    }
}

$user = new User(1234, null);

var_dump($user->id);
var_dump($user->name);

?>
]]>
     </programlisting>
     &example.outputs;
     <screen>
<![CDATA[
int(1234)
NULL
]]>
     </screen>
    </example>
   </para>

   <para>
    Tür bildirimli özellikler erişilmeden önce ilklendirilmelidir, aksi
    takdirde bir <classname>Error</classname> yavrulanır.
    <example>
      <title>- Özelliklere erişim</title>
     <programlisting role="php">
<![CDATA[
<?php

class Shape
{
    public int $numberOfSides;
    public string $name;

    public function setNumberOfSides(int $numberOfSides): void
    {
        $this->numberOfSides = $numberOfSides;
    }

    public function setName(string $name): void
    {
        $this->name = $name;
    }

    public function getNumberOfSides(): int
    {
        return $this->numberOfSides;
    }

    public function getName(): string
    {
        return $this->name;
    }
}

$triangle = new Shape();
$triangle->setName("triangle");
$triangle->setNumberofSides(3);
var_dump($triangle->getName());
var_dump($triangle->getNumberOfSides());

$circle = new Shape();
$circle->setName("circle");
var_dump($circle->getName());
var_dump($circle->getNumberOfSides());
?>
]]>
     </programlisting>
     &example.outputs;
     <screen>
<![CDATA[
string(8) "triangle"
int(3)
string(6) "circle"

Fatal error: Uncaught Error: Typed property Shape::$numberOfSides must not be accessed before initialization
]]>
     </screen>
    </example>
   </para>
  </sect2>
 </sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
