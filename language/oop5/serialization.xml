<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: a9edd62d087ab1eb6292c795b7256e14ff9f1234 Maintainer: nilgun Status: ready -->
 <sect1 xml:id="language.oop5.serialization" xmlns="http://docbook.org/ns/docbook">
  <title>Nesne Dizgeleştirme</title>
  <title>Oturumlardaki nesnelerin dizgeleştirilmesi</title>

  <para>
   <function>serialize</function> işlevi PHP'de saklanmış bir değerin
   bayt-akımı gösterimini içeren bir dizge döndürür. Özgün değişken değerlerini
   yeniden oluşturmak için <function>unserialize</function> işlevi
   kullanılabilir. Bir nesneyi saklamak için dizgeleştirme kullanımı nesnenin
   içindeki tüm değişkenleri saklar. Nesnenin yöntemleri saklanmaz sadece
   sınıf ismi saklanır.
  </para>

  <para>
   Bir nesne için <function>unserialize</function> kullanabilmek için sınıf
   nesnesinin tanımlı olması gerekir. Yani, A sınıfının bir nesnesi varsa ve
   siz onu dizgeleştiriseniz, A sınıfının ismini ve içerdiği tüm değişkenlerin
   değerlerini içeren bir dizge alırsınız. Başka bir dosyada bu dizgeyi
   <function>unserialize</function> ile dönüştürmek isterseniz, bu dosyada
   daha önce A sınıfını tanımlamış ve nesnesini oluşturmuş olmalısınız.
   Bu, örneğin, A sınıfının tanımını bir include dosyasında saklayıp bu
   dosyayı betiğinize dahil ederek veya
   <function>spl_autoload_register</function> işlevini kullanarak
   yapabilirsiniz.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
// classa.inc:

  class A {
      public $one = 1;

      public function show_one() {
          echo $this->one;
      }
  }

// page1.php:

  include("classa.inc");

  $a = new A;
  $s = serialize($a);
  // $s'i page2.php'nin bulabileceği bir yere sakla
  file_put_contents('store', $s);

// page2.php:

  // unserialize işlevinin düzgün çalışması için gerekli
  include("classa.inc");

  $s = file_get_contents('store');
  $a = unserialize($s);

  // şimdi show_one() işlevini kullanabiliriz.
  $a->show_one();
?>
]]>
   </programlisting>
  </informalexample>

  <para>
   Bir uygulama, uygulamada daha sonra kullanmak için nesneleri
   dizgeleştiriyorsa, uygulamanın o nesnenin sınıf tanımını uygulama boyunca
   içermesi şiddetle tavsiye edilir. Bunu yapmamak, bir nesnenin sınıf
   tanımlaması olmaksızın nesneleştirilmesiyle sonuçlanabilir, bu da PHP'nin
   nesneyi hiçbir yöntemi olmayan bir
   <classname>__PHP_Incomplete_Class_Name</classname> sınıfına sokmasına
   neden olur ve sonuçta nesne işe yaramaz hale gelir.
  </para>

  <para>
   Yani, yukarıdaki örnekte, eğer <literal>session_register("a")</literal>
   çalıştırarak <varname>$a</varname> bir oturumun parçası haline gelirse,
   <literal>classa.inc</literal> dosyasını yalnız <filename>page1.php</filename>
   ve <filename>page2.php</filename> dosyalarına değil tüm sayfa dosyalarına
   dahil etmelisiniz.
  </para>

  <para>
   Yukarıdaki tavsiyenin ötesinde, <link linkend="object.sleep">__sleep()</link>
   ve <link linkend="object.wakeup">__wakeup()</link> yöntemlerini kullanarak
   da bir nesne üzerinde dizgeleştirme ve yeniden nesneleştirme yapabileceğinizi
   unutmayın. <link linkend="object.sleep">__sleep()</link> kullanımı ayrıca,
   nesne özelliklerinin tamamının değil sadece bir kısmının dizgeleştirilmesini
   de sağlar.
  </para>
 </sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
