<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 84b2eca1809fb0b2a7315cefb8810ca96fbeebb6 Maintainer: nilgun Status: ready -->
<sect1 xml:id="language.oop5.variance" xmlns="http://docbook.org/ns/docbook">
 <title>Çok Özgüllük ve Az Özgüllük</title>

 <para>
  PHP 7.2.0'da, bir çocuk yöntem değiştirgelerindeki tür sınırlamaları
  kaldırılarak az özgüllüklere kısmen girildi. PHP 7.4.0'dan itibaren,
  az ve çok özgüllüklere tam destek eklendi.
 </para>
 <para>
  Çok özgüllük, bir çocuk yöntemin ebeveyn yönteminden daha özellikli bir
  tür döndürmesine izin verir. Buna karşın, az özgüllük, bir değiştirgenin
  bir çocuk yöntemin içinde ebeveyndekinden daha az özellikli olmasına izin
  verir.
 </para>

 <sect2 xml:id="language.oop5.variance.covariance">
  <title>Çok Özgüllük</title>

  <para>
   Çok özgüllüğün nasıl çalıştığını göstermek için, basit bir soyut
   ebeveyn sınıf olarak <varname>Hayvan</varname> sınıfı oluşturulup
   <varname>Kedi</varname> ve <varname>Köpek</varname> çocuk sınıflarına
   genişletildi.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

abstract class Hayvan
{
    protected string $isim;

    public function __construct(string $isim)
    {
        $this->name = $isim;
    }

    abstract public function konuş();
}

class Köpek extends Hayvan
{
    public function konuş()
    {
        echo $this->name . " havlar";
    }
}

class Kedi extends Hayvan
{
    public function konuş()
    {
        echo $this->name . " miyavlar";
    }
}
]]>
   </programlisting>
  </informalexample>

  <para>
   Bu örnekte yöntemlerin hiçbiri değer döndürmemektedir.
   <varname>Hayvan</varname>, <varname>Kedi</varname> ve
   <varname>Köpek</varname> sınıfı türünde yeni bir nesne döndüren birkaç
   arayüz eklenecektir.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

interface HayvanYuvası
{
    public function sahiplen(string $isim): Hayvan;
}

class KediYuvası implements HayvanYuvası
{
    public function sahiplen(string $isim): Kedi // Hayvan türünde bir sınıf yerine Kedi türünde bir sınıf döner
    {
        return new Kedi($isim);
    }
}

class KöpekYuvası implements HayvanYuvası
{
    public function sahiplen(string $isim): Köpek // Hayvan türünde bir sınıf yerine Köpek türünde bir sınıf döner
    {
        return new Köpek($isim);
    }
}

$mırnav = (new KediYuvası)->sahiplen("Tekir");
$mırnav->konuş();
echo "\n";

$kuçu = (new KöpekYuvası)->sahiplen("Çomar");
$kuçu->konuş();
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
Tekir miyavlar
Çomar havlar
]]>
   </screen>
  </informalexample>
 </sect2>

 <sect2 xml:id="language.oop5.variance.contravariance">
  <title>Az Özgüllük</title>

  <para>
   <varname>Hayvan</varname>, <varname>Kedi</varname> ve
   <varname>Köpek</varname> sınıflarıyla önceki örneğe devam ederek, bunlara
   <varname>Yem</varname> ve <varname>HayvanYemi</varname> sınıflarını dahil
   edip <varname>Hayvan</varname> soyut sınıfına
   <varname>ye(HayvanYemi $yem)</varname> yöntemini ekleyelim.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

class Yem {}

class HayvanYemi extends Yem {}

abstract class Hayvan
{
    protected string $isim;

    public function __construct(string $isim)
    {
        $this->name = $isim;
    }

    public function ye(HayvanYemi $yem)
    {
        echo $this->name . " " . get_class($yem) . "yer";
    }
}
]]>
   </programlisting>
  </informalexample>

  <para>
   Az özgüllüğün davranışını görmek için, herhangi bir
   <varname>Yem</varname> türü nesneye izin vermek için <varname>Köpek</varname>
   sınıfında <varname>ye</varname> yöntemi geçersiz kılınır.
   <varname>Kedi</varname> sınıfı değişmeden kalır.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

class Köpek extends Hayvan
{
    public function ye(Yem $yem) {
        echo $this->name . " " . get_class($yem) . "yer";
    }
}
]]>
   </programlisting>
  </informalexample>

  <para>
   Aşağıdaki örnek az özgüllüğün davranışını gösterir:
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

$mırnav = (new KediYuvası)->sahiplen("Tekir");
$kediYemi = new HayvanYemi();
$mırnav->ye($kediYemi);
echo "\n";

$kuçu = (new KöpekYuvası)->sahiplen("Çomar");
$kemik = new Yem();
$kuçu->ye($kemik);
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
Tekir HayvanYemi yer
Çomar Yem yer
]]>
   </screen>

   <para>
    Peki $mırnav $kemik <varname>ye</varname>meye çalışırsa ne olur?
   </para>

   <programlisting role="php">
<![CDATA[
$mırnav->ye($kemik);
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
Fatal error: Uncaught TypeError: Argument 1 passed to Hayvan::ye() must be an instance of HayvanYemi, instance of Yem given
Türkçesi: Ölümcül hata: ... : Hayvan::ye() yöntemine aktarılan 1. değiştirge
bir HayvanYemi örneği olmalı, Yem örneği verildi
]]>
   </screen>
  </informalexample>
 </sect2>
</sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
