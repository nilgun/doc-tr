<?xml version="1.0" encoding="UTF-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 86e6094e86b84a51d00ab217ac50ce8dde33d82a Maintainer: tpug Status: ready -->
 <chapter xml:id="tutorial" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
  <title>Basit bir eğitmen</title>

  <para>
    Bu bölümde PHP ile ilgili en temel bilgileri kısa ve basit bir eğitmen
    üzerinde anlatmak istiyoruz. Bu metin yalnızca PHP ile dinamik site
    sayfaları geliştirmeyi ele alır, ancak PHP'nin yeteneği yalnızca site
    sayfaları oluşturmakla sınırlı değildir. Daha fazla bilgi için
    <link linkend="intro-whatcando">PHP'nin yapabildikleri</link> bölümünü
    inceleyebilirsiniz.
  </para>
  <para>
    PHP tarafından etkinleştirilen site sayfaları normal HTML sayfaları
    gibidir ve bu sayfaları normal HTML sayfaları için kullandığınız
    yöntemlerle oluşturabilir ve düzenleyebilirsiniz.
  </para>

  <section xml:id="tutorial.requirements">
   <title>Neye ihtiyacım var?</title>
   <para>
    Bu eğitmen süresince HTTP sunucunuzun PHP desteğinin etkinleştirilmiş
    olduğunu ve tüm <filename>.php</filename> uzantılı dosyaların PHP
    tarafından yorumlandığını varsayacağız. Çoğu sunucuda, bu uzantı PHP
    dosyaları için öntanımlı dosya uzantısıdır, ancak emin olmak için
    sunucunuzun yöneticisinden doğru bilgiyi edinebilirsiniz. Sunucunuz
    PHP&apos;yi destekliyorsa, başka hiçbir şeye ihtiyacınız yok demektir.
    Yalnızca <filename>.php</filename> uzantılı dosyalarınızı oluşturmanız
    sunucunuzun belge dizinlerine koymanız, sunucunuzun bu dosyayı sizin
    için otomatik olarak işleme koyması için yeterli olacaktır. Herhangi
    bir şeyi derlemeniz ya da fazladan bir araç kurulumu yapmanız
    gerekmemektedir. PHP tarafından etkinleştirilen dosyaları yeni bir tür
    HTML dosyası olarak kafanızda canlandırabilirsiniz. Düşünün ki, artık
    HTML dosyasının içine sihirli birtakım etiketler koyabiliyor ve bu
    etiketler sayesinde istediğiniz her tür işlemi gerçekleştirebiliyorsunuz.
   </para>
   <para>
    Diyelim ki çok değerli olan band genişliğinizi boşa harcamamak ve kendi
    sisteminizde yerel olarak geliştirme yapmak istiyorsunuz. Bu durumda,
    <link xlink:href="&url.apache;">Apache</link> gibi bir HTTP sunucusunu
    ve elbette <link xlink:href="&url.php.downloads;">PHP</link>&apos;yi
    indirmeniz ve kurmanız gerekecektir. Bu ikilinin yanında,
    <link xlink:href="&url.mysql.docs;">MySQL</link> gibi bir veritabanını
    da indirip kurmanız iyi olacaktır.
   </para>
   <para>
    Bu üçlüyü tek tek kurmak yerine daha basit bir yol izleyebilirsiniz.
    Kılavuzumuz <link linkend="install">PHP için kurulum bilgileri</link>
    (HTTP sunucunuzun halihazırda kurulu olduğunu öngörür) bölümüne sahiptir.
    PHP&apos;yi kendiniz kurmakta sorun yaşarsanız, sorularınızın çözümü için
    <link xlink:href="&url.php.mailing-lists;">kurulum posta listesi</link>'ne
    başvurabilirsiniz. Daha basit bir yoldan gitmek istiyorsanız, işletim
    sisteminize uygun olan <link xlink:href="&url.installkits;">ön
    yapılandırmalı paket</link>leri seçebilir ve tüm bu araçları bir kaç fare
    tıklamasıyla otomatik olarak yükleyebilirsiniz. MacOSX, Linux ve Windows
    dahil olmak üzere birçok işletim sistemine PHP destekli bir HTTP sunucusu
    kurmak oldukça kolaydır. Linux üzerinde,
    <link xlink:href="&url.rpmfind;">rpmfind</link> ve
    <link xlink:href="&url.rpmfind.pbone;">PBone</link> araçlar RPM dosyalarını
    bulmakta size yardımcı olacaklardır. Debian için ise
    <link xlink:href="&url.apt-get;">apt-get</link> sayfasını ziyaret
    edebilirsiniz.
      </para>
  </section>

  <section xml:id="tutorial.firstpage">
   <title>İlk PHP-etkin sayfanız</title>
   <para>
    <filename>merhaba.php</filename> isimli bir dosya oluşturun ve HTML
    sunucunuzun belge kök dizinine (<varname>DOCUMENT_ROOT</varname>)
    aşağıdaki içerikle kaydedin:
   </para>
   <para>
    <example>
     <title>- İlk PHP betiğimiz: <filename>merhaba.php</filename></title>
     <programlisting role="php">
<![CDATA[
<html>
 <head>
  <title>PHP Denemesi</title>
 </head>
 <body>
 <?php echo '<p>Merhaba Dunya</p>'; ?>
 </body>
</html>
]]>
     </programlisting>
     <simpara>
      Tarayıcınızı kullanarak HTTP sunucunuzun adresine erişebilirsiniz,
      sunucunuzun alan adının sonuna <literal>/merhaba.php</literal> eklemeniz
      yeterli olacaktır. Yerel olarak geliştirme yaparken bu URL
      <literal>http://localhost/merhaba.php</literal> ya da
      <literal>http://127.0.0.1/merhaba.php</literal> gibi bir şey olacaktır,
      ancak bu HTTP sunucusunun yapılandırma ayarlarına bağlıdır. Eğer her şey
      düzgün yapılandırılmışsa, bu dosya PHP tarafından işlenecek ve aşağıdaki
      çıktı tarayıcınıza gönderilecektir:
     </simpara>
     <screen role="html">
<![CDATA[
<html>
 <head>
  <title>PHP Denemesi</title>
 </head>
 <body>
 <p>Merhaba Dunya</p>
 </body>
</html>
]]>
     </screen>
    </example>
   </para>
   <para>
    Bu program gördüğünüz gibi son derece basittir ve esasında böyle bir sayfa
    oluşturmak için PHP&apos;ye gereksiniminiz yoktur. Görüntülenen:
    PHP&apos;nin <function>echo</function> deyimi kullanılarak elde edilen
    <literal>Merhaba Dünya</literal> cümlesidir. Bu dosyanın hiçbir şekilde
    <emphasis>çalıştırılabilir olmasına ya da özel bir türde olmasına ihtiyaç
    duyulmadığına</emphasis> dikkat edin. Sunucu dosyanın PHP tarafından
    işlenmesi gerektiğini bilir çünkü dosyaya ".php" uzantısını tanımladınız.
    Sunucu bu uzantıya sahip dosyaları PHP'ye aktaracak biçimde
    yapılandırılmıştır. Bunu size birtakım özel etiketlerle birçok ilginç
    işlem yapmanızı sağlayan bir tür HTML dosyası olarak düşünebilirsiniz.
   </para>
   <para>
    Bu örneği denediyseniz ve hiçbir çıktı alamadıysanız, sizden dosyayı
    indirmenizi istediyse ya da dosyanın tüm içeriğini metin olarak ekranda
    gördüyseniz, büyük ihtimalle sunucunuzun PHP desteği etkinleştirilmemiştir
    ya da sunucunuz doğru yapılandırılmamıştır. Yöneticinizden kılavuzdaki
    <link linkend="install">Kurulum</link> bölümünü kullanarak PHP&apos;yi
    etkinleştirmesini rica edebilirsiniz. Yerel olarak geliştirme
    yapıyorsanız, kurulum bölümünü okuyarak herşeyin doğru
    yapılandırıldığından emin olun. Size çıktıyı sağlayan sunucudaki dosyaya
    http üzerinden erişmeye çalışıp çalışmadığınızı kontrol edin. Dosyayı
    doğrudan kendi dosya sisteminizden çağırıyorsanız, PHP tarafından
    işlenmeyecektir. Sorun her şeye rağmen devam ediyorsa,
    <link xlink:href="&url.php.support;">PHP desteği alma</link> yöntemlerini
    kullanmakta tereddüt etmeyin.
   </para>
   <para>
    Bu örneğin amacı özel PHP etiketi biçemini göstermektir. Örnekte
    <literal>&lt;?php</literal> ile PHP etiketinin başlangıcını belirledik.
    Sonra PHP komutunu yazdık ve kapanış etiketi <literal>?&gt;</literal>
    kullanarak PHP kipinden çıktık. Bir HTML dosyasında bu yöntemi kullanarak
    istediğiniz yerde PHP kipine girip çıkabilirsiniz. Daha fazla bilgi için,
    kılavuzun <link linkend="language.basic-syntax">temel PHP sözdimi</link>
    bölümünü  okuyabilirsiniz.
   </para>

   <note>
    <info><title>Satırsonları hakkında</title></info>
    <para>
     Satırsonu karakterlerinin HTML içinde bir önemi yoktur, bununla birlikte
     HTML kodunun göze hoş görünmesi için satırsonu karakterlerini kullanmak
     gerekir. <literal>?&gt;</literal> kapama etiketinin hemen ardından gelen
     satırsonu karakterini PHP silecektir. Dosyanın içine çok sayıda PHP
     bloğu koyarsanız veya hiçbir şey çıktılamayan betikleri dosyaya dahil
     etmeniz durumunda bu çok işe yarar. Ancak bu biraz kafa karıştırıcı
     olabilir. <literal>?&gt;</literal> kapama etiketinden sonra bir
     satırsonu karakterinin çıktılanmasını zorlamak isterseniz, ya kapama
     etiketinden sonra bir boşluk bırakıp onun ardına satırsonu karakterini
     koyun ya da PHP bloğunun son echo/print deyiminin sonuna bir satır sonu
     karakteri ekleyin.
    </para>
   </note>

   <note>
    <title>Metin Düzenleyiciler Hakkında</title>
    <para>
    PHP dosyalarını yaratabileceğiniz, düzenleyebileceğiniz ve
    yönetebileceğiniz birçok metin düzenleyici ve Bütünleşik Geliştirme
    Ortamı (IDE) bulunmaktadır. Bu araçların bir kısmı
    <link xlink:href="&url.phpeditorlist;">PHP Düzenleyicileri Listesi</link>
    bölümünde listelenmiştir. Sizin önermek istediğiniz bir düzenleyici
    varsa, lütfen yukarıdaki sayfayı ziyaret edin ve sayfa idarecisinden
    önermek istediğiniz düzenleyiciyi bu listeye eklemesini rica edin. Söz
    dizimi vurgulaması olan bir düzenleyici size yardımcı olabilir.
    </para>
   </note>

   <note>
    <title>Kelime İşlemciler Hakkında</title>
    <para>
      StarOffice Writer, Microsoft Word ve Abiword gibi kelime işlemciler PHP
      dosyalarını düzenlemek için uygun değillerdir. Eğer bu deneme betiği
      için bunlardan birini kullanmak istiyorsanız, dosyanın <emphasis>salt
      metin</emphasis> olarak kaydedildiğinden emin olun, aksi takdirde
      PHP&apos;nin betiği okuması ve çalıştırması mümkün olmayacaktır.
    </para>
   </note>

   <note>
    <title>Windows Not Defteri Hakkında</title>
    <para>
      PHP betiklerinizi Windows Not Defteri ile yazıyorsanız, dosyalarınızın
      <filename>.php</filename> uzantısı ile kaydedildiğinden emin olmalısınız
      (Notepad birazdan bahsedeceğimiz önlemleri almadığınız takdirde
      dosyaların sonuna otomatik olarak <filename>.txt</filename> uzantısı
      ekler). Dosyayı kaydetmek istediğinizde, sizden dosyanız için bir isim
      belirtmeniz istenecektir. Dosya ismini tırnak içinde (örn.
      "<filename>hello.php</filename>") yazın. Bundan başka, 'Kaydet' iletişim
      kutusunun içindeki 'Metin Belgeleri' açılır menüsüne tıkladıktan sonra
      buradaki değeri "Tüm Dosyalar" olarak değiştirin. Artık dosya isminizi
      tırnak işareti kullanmadan yazabilirsiniz.
    </para>
   </note>

  <para>
   Artık çalışır bir PHP betiğini başarıyla oluşturduğunza göre, PHP
   betiklerinin en ünlüsünü oluşturma zamanı geldi demektir!
   <function>phpinfo</function> işlevini çalıştıracağız ve sisteminiz ve
   yapılandırmanızla ilgili
   <link linkend="language.variables.predefined">öntanımlı değişkenler</link>,
   yüklü PHP modülleri ve <link linkend="configuration">yapılandırma</link>
   ayarları gibi konularda faydalı birçok bilgiye ulaşacağız. Bu önemli
   bilgiler için biraz vakit ayırmanızı ve bunları incelemenizi öneririz.
   </para>
   <para>
    <example>
     <title>- PHP ile sistem bilgisine ulaşmak</title>
     <programlisting role="php">
<![CDATA[
<?php phpinfo(); ?>
]]>
     </programlisting>
    </example>
   </para>
  </section>

  <section xml:id="tutorial.useful">
   <title>İşe yarar bir şey</title>
   <para>
    Şimdi daha işe yarar bir şey yapalım. Ziyaretçilerinizin hangi tarayıcıyı
    kullandığını tespit edelim. Bunun için, ziyaretçinizin tarayıcısı
    tarafından HTTP isteği ile birlikte gönderilen kullanıcı aracısı
    dizgesine bakacağız. Bu bilgi bir <link linkend="language.variables"
    >değişkende</link> saklanır. Değişkenler PHP&apos;de her zaman dolar
    işareti ile başlar. Bizim şu an için ilgilendiğimiz değişken
    <varname>$_SERVER[&apos;HTTP_USER_AGENT&apos;]</varname>'tir.
   </para>
   <note>
    <para>
     <varname>$_SERVER</varname> PHP kullanımına ayrılmış özel bir değişken
     olup HTTP sunucusunun tüm bilgilerini içerir. Bu tür değişkenlere süper
     küreseller denir. Bu konuda daha ayrıntılı bilgiyi <link
     linkend="language.variables.superglobals">Süper küreseller</link>
     bölümünde bulabilirsiniz. Bu özel değişkenler
     PHP <link xlink:href="&url.php.release4.1.0;">4.1.0</link> sürümünden
     itibaren kullanılmaya başlanmıştır. Daha öncesinde,
     <varname>$HTTP_SERVER_VARS</varname> gibi eski
     <varname>$HTTP_*_VARS</varname> dizileri kullanılmaktaydı. PHP 5.4.0
     itibariyle bu eski tarz değişkenler artık kullanılamamaktadır.
     (<link linkend="tutorial.oldcode">Eski kod</link> bölümüne de bakınız.)
    </para>
   </note>
   <para>
    Bu değişkenin değerini görüntülemek için yapmanız gereken:
   </para>
   <para>
    <example>
    <title>- Bir değişkeni (dizi öğesini) yazdırmak</title>
    <programlisting role="php">
<![CDATA[
<?php echo $_SERVER['HTTP_USER_AGENT']; ?>
]]>
    </programlisting>
    <para>
      Bu betiğin çıktısı şöyle bir dizge olabilirdi:
    </para>
    <screen role="html">
Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)
    </screen>
   </example>
   </para>
   <para>
    PHP&apos;de birçok farklı değişken <link linkend="language.types"
    >türü</link> mevcuttur. Yukardaki örnekte bir <link
    linkend="language.types.array">dizi</link>ye ait bir öğeyi yazdırdık.
    Diziler çok kullanışlı olabilirler.
   </para>
   <para>
    <varname>$_SERVER</varname> PHP tarafından kullanımınıza otomatik
    olarak sunulan bir değişkendir. Kullanım kılavuzunun
    <link linkend="reserved.variables">Öntanımlı Değişkenler</link>
    bölümünden tümünün listesine ulaşabilirsiniz ya da önceki örnekte
    kullandığımız <function>phpinfo</function> işlevi ile üretilen çıktıya
    bakarak bütün listeye ulaşabilirsiniz.
   </para>
   <para>
    PHP etiketinin içine birden çok PHP komutu koyabilir ve tek bir echo
    komutundan daha fazlasını yapan küçük kod blokları oluşturabilirsiniz.
    Örneğin, ziyaretçinizin Internet Explorer kullanıp kullanmadığını şöyle
    öğrenebilirsiniz:
   </para>
   <para>
    <example>
     <title>- <link linkend="language.control-structures">Denetim yapılarının
     </link> ve <link linkend="language.functions">işlevlerin</link> kullanım
     örneği</title>
     <programlisting role="php">
<![CDATA[
<?php
if (strpos($_SERVER['HTTP_USER_AGENT'], 'MSIE') !== FALSE) {
    echo 'Internet Explorer kullanmaktasınız.<br />';
}
?>
]]>
     </programlisting>
     <para>
      Bu betiğin çıktısı şöyle olabilirdi:
     </para>
     <screen role="html">
<![CDATA[
Internet Explorer kullanmaktasınız.<br />
]]>
     </screen>
    </example>
   </para>
   <para>
    Burada birkaç yeni kavramı devreye soktuk. Bir <link
    linkend="control-structures.if">if</link> deyimimiz var. Eğer C dilinde
    kullanılan temel sözdizimine aşinalığınız varsa, bu kullanım size tanıdık
    gelecektir. Aksi takdirde, giriş düzeyinde bir PHP kitabı almanız ve ilk
    birkaç bölümünü okumanız ya da kılavuzun <link linkend="langref">Dil
    Başvuru Kılavuzu</link> bölümünü okumanız faydalı olacaktır.
   </para>
   <para>
    Devreye soktuğumuz ikinci kavram, <function>strpos</function> işlevi ile
    yaptığımız çağrı oldu. <function>strpos</function>, bir dizgeyi başka bir
    dizgenin içinde arayan yerleşik bir PHP işlevidir. Burada
    <literal>&apos;MSIE&apos;</literal> dizgesini (iğne)
    <varname>$_SERVER['HTTP_USER_AGENT']</varname> içinde (samanlık)
    arıyoruz. Eğer iğne samanlıkta bulunursa işlev iğnenin konumunu
    samanlığın başlangıcına göreli olarak döndürür. Aksi takdirde &false;
    döner. <link linkend="control-structures.if">if</link> ifadesinin sonucu
    &true; olduğu takdirde &false; dönmez ve kaşlı ayraçlar arasındaki kod
    çalıştırılır. Aksi takdirde kod çalıştırılmaz. <link
    linkend="control-structures.if">If</link>, <link
    linkend="control-structures.else">else</link> gibi denetim yapıları ile
    <function>strtoupper</function> ve <function>strlen</function> gibi
    işlevleri kullanarak siz de benzer örnekler yazabilirsiniz. İlgili her
    kılavuz sayfası aynı zamanda örnekler de içermektedir. Bu işlevleri nasıl
    kullanmanız gerektiğinden emin değilseniz, kılavuzdaki <link
    linkend="about.prototypes">bir işlev tanımı nasıl okunur</link> ve <link
    linkend="language.functions">PHP işlevleri</link> bölümlerini
    okuyabilirsiniz.
   </para>
   <para>
    Bunu bir adım öteye taşıyabilir ve bir PHP bloğunun tam ortasındayken bile PHP kipine nasıl girip çıkabileceğimize bakabiliriz:
   </para>
   <para>
    <example>
     <title>- HTML ve PHP kiplerini karıştırmak</title>
     <programlisting role="php">
<![CDATA[
<?php
if (strpos($_SERVER['HTTP_USER_AGENT'], 'MSIE') !== FALSE) {
?>
<h3>strpos() false olmayan bir değer döndürmelidir</h3>
<p>Internet Explorer kullanmaktasınız</p>
<?php
} else {
?>
<h3>strpos() false döndürmelidir</h3>
<p>Internet Explorer kullanmıyorsunuz</p>
<?php
}
?>
]]>
     </programlisting>
     <para>
      Bu betikten elde edilebilecek sonuçlardan biri:
     </para>
     <screen role="html">
<![CDATA[
<h3>strpos() false olmayan bir değer döndürmelidir</h3>
<p>Internet Explorer kullanmaktasınız</p>
]]>
     </screen>
    </example>
   </para>
   <para>
    Bir çıktı üretmek için PHP echo komutunu kullanmak yerine, PHP kipinden
    çıktık ve sadece düz HTML gönderdik. Burada dikkat edilmesi gereken önemli
    nokta, betiğin mantıksal akışının değişmiyor olmasıdır.
    <function>strpos</function> işlevinden edinilen sonuca göre HTML
    bloklarından yalnızca biri görüntüleyiciye gönderilmektedir. Başka bir
    deyişle, bu işleyiş <literal>MSIE</literal> değişkeninin bulunup
    bulunmamasına bağlıdır.
   </para>
  </section>

  <section xml:id="tutorial.forms">
   <title>Form Kullanımı</title>
   <para>
    PHP&apos;nin en güçlü özelliklerinden biri HTML formlarına yaklaşım
    biçimidir. Bilinmesi gereken ilk önemli durum, form içindeki tüm
    elemanların PHP tarafından otomatik olarak kullanılabilir olacağıdır.
    PHP ile formların kullanımı ve daha ayrıntılı bilgi için <link
    linkend="language.variables.external">Dış kaynaklı değişkenler</link>
    bölümünü okuyabilirsiniz. Örnek bir HTML formu:
   </para>
   <para>
    <example>
     <title>- Örnek bir HTML formu</title>
     <programlisting role="html">
<![CDATA[
<form action="action.php" method="post">
 <p>İsminiz: <input type="text" name="isim" /></p>
 <p>Yaşınız: <input type="text" name="yaş" /></p>
 <p><input type="submit" /></p>
</form>
]]>
     </programlisting>
    </example>
   </para>
   <para>
    Bu formda özel hiçbir şey yoktur. Hiçbir özel etiket içermeyen düz bir
    HTML formudur. Kullanıcı formu doldurup gönder tuşuna bastığında,
    <filename>action.php</filename> sayfası çağrılır. Bu dosyaya aşağıdakileri
    yazabiliriz:
   </para>
   <para>
    <example>
     <title>- Formdan veri yazdırmak</title>
     <programlisting role="php">
<![CDATA[
Merhaba <?php echo htmlspecialchars($_POST['isim']); ?>.
Siz <?php echo (int)$_POST['yaş']; ?> yaşındasınız.
]]>
     </programlisting>
     <para>
      Bu betikten elde edilecek örnek çıktı:
     </para>
     <screen role="html">
<![CDATA[
Merhaba Ahmet. Siz 22 yaşındasınız.
]]>
     </screen>
    </example>
   </para>
   <para>
    <function>htmlspecialchars</function> ve <literal>(int)</literal>
    kısımları harcinde yapılan iş oldukça açık.
    <function>htmlspecialchars</function> işlevi HTML'ye özel karakterlerin
    doğru şekilde kodlandığından emin olunmasını sağlar, dolayısıyla
    başkaları sayfanıza dışardan HTML etiketleri veya Javascript
    yerleştiremez. Yaş alanınında ise değerin bir tamsayı olması gerektiğini
    bildiğimiz için değeri <type>int</type> türüne <link
    linkend="language.types.typecasting">dönüştürmekle</link> otomatik
    olarak bu alana girilmesi olası başı boş karakterlerden de kurtulmuş
    olduk. Ayrıca, bunun PHP'de sizin yerinize otomatik olarak yapılmasını
    sağlamak için <link linkend="ref.filter">süzgeç</link> eklentisini de
    kullanabilirdiniz. <varname>$_POST[&apos;isim&apos;]</varname> değişkeni
    ve <varname>$_POST[&apos;yaş&apos;]</varname> değişkenleri sizin yerinize
    PHP tarafından otomatik olarak oluşturulur. Daha önce
    <varname>$_SERVER</varname> süper küresel değişkenini kullanmıştık,
    yukarıda ise tüm POST verisini içeren <link
    linkend="reserved.variables.post">$_POST</link> süper küresel değişkenini
    tanımış olduk. Formumuz için tanımlı <emphasis>yöntem</emphasis>in POST
    oluşuna dikkat edin. <emphasis>GET</emphasis> yöntemini kullanmış
    olsaydık, form bilgilerimiz <link
    linkend="reserved.variables.get">$_GET</link> süper küresel değişkenine
    atanmış olacaktı. Bunların haricinde, istemciden gelen verinin hangi
    kaynaktan geldiği sizin için önemli değilse <varname>$_REQUEST</varname>
    süper küreselini de kullanabilirdiniz. Bu değişken GET, POST ve COOKIE
    verilerinin birleşiminden oluşur.
   </para>
   <para>
    PHP içinde XForms öğelerini de kullanabilirsiniz, ancak başlangıç
    aşamasında çok iyi desteklenen HTML formları sizin işinizi görecektir.
    XForms ile çalışmak yeni başlayanlar için uygun olmasa da, ilginizi
    çekebilir. <link linkend="features.xforms">XForms ile çalışmak</link>
    belgesinde bu konu ile ilgili daha fazla bilgi bulabilirsiniz.
   </para>
  </section>

  <section xml:id="tutorial.oldcode">
   <title>PHP&apos;nin yeni sürümleri ile eski kod yapısını kullanmak</title>
   <para>
    PHP&apos;nin günümüzün çok kullanılan bir betik dili olmasıyla birlikte,
    hazır kullanabileceğiniz kodlar üreten halka açık birçok depo ve
    kütüphane oluşturuldu. PHP geliştiricileri geriye dönük uyumluluğu mümkün
    olduğunca korumaya çalıştılar, dolayısıyla eski bir PHP sürümü ile
    birlikte yazılmış bir PHP kodu hiçbir değişiklik yapılmasına gerek
    duyulmadan (ideal olarak) yeni PHP sürümleri ile çalışabilir halde kaldı.
    Ancak uygulamada, bazı değişikliklerin yapılması gerekebilir.
   </para>
   <para>
    Eski kodları etkileyen yakın geçmişe ait iki önemli değişiklik:
    <itemizedlist>
     <listitem>
      <simpara>
        Eski <varname>$HTTP_*_VARS</varname> dizileri PHP 5.4.0'dan itibaren kullanımdan kaldırılmıştır. Bunların yerini alan <link
        linkend="language.variables.superglobals">süper küresel diziler</link>
        PHP&apos;nin <link xlink:href="&url.php.release4.1.0;">4.1.0</link>
        sürümünden itibaren kullanılabilir olmuştur. Bunlar:
        <varname>$_GET</varname>, <varname>$_POST</varname>,
       <varname>$_COOKIE</varname>, <varname>$_SERVER</varname>,
       <varname>$_FILES</varname>, <varname>$_ENV</varname>,
       <varname>$_REQUEST</varname> ve <varname>$_SESSION</varname>
       dizileridir.
      </simpara>
     </listitem>
     <listitem>
      <simpara>
        Dış kaynaklı değişkenler artık küresel etki alanında örtanımlı olarak
        yer almamaktadır. Başka bir deyişle, PHP <link
        xlink:href="&url.php.release4.2.0;">4.2.0</link> sürümünden itibaren
        <link linkend="ini.register-globals">register_globals</link>
        &php.ini; yönergesinin öntanımlı değeri <emphasis>off</emphasis>'tur
        (kapalıdır). Bu değerlere erişim için tercih edilen süper küresel
        dizi kullanımından yukarıda bahsettik. Eski betikler, kitaplar ve
        öğreticiler bu yönergenin <literal>on</literal> olduğu kabul edilerek
        yazılmış olabilir. Bu yönerge <literal>on</literal> olduğunda, örneğin
        <literal>http://mesela.dom/foo.php?id=42</literal> URL'sine
        gelen bir istek ile <varname>$id</varname> değişkeni otomatik
        olarak oluşturulur. Bu yönergenin açık ya da kapalı olduğuna
        bakılmazsızın, <varname>$_GET['id()]</varname> daima
        kullanılabilir olacaktır.
       </simpara>
     </listitem>
    </itemizedlist>
      Bu değişiklikler ile ilgili daha fazla bilgi için, <link
      linkend="language.variables.predefined">Öntanımlı
      Değişkenler</link> bölümünden ve oradaki diğer bağlantılardan
      faydalanabilirsiniz.
   </para>
  </section>

  <section xml:id="tutorial.whatsnext">
   <title>Sonraki adım nedir?</title>
   <para>
    Sahip olduğunuz yeni bilgilerle kılavuzun birçok bölümünü anlayabilir ve
    örnek arşivinde bulunan birçok betiği okuyabilir hale gelmiş olmalısınız.
   </para>
   <para>
    PHP ile neler yapabileceğiniz ile ilgili sunumlara ulaşmak isterseniz,
    <link xlink:href="&url.php.talks;">&url.php.talks;</link> adresindeki PHP
    Konferans Malzemeleri Sitesini ziyaret edebilirsiniz.
   </para>
  </section>
 </chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
